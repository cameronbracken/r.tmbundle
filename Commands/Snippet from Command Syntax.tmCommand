<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#! /usr/bin/ruby
require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes.rb"
require ENV['TM_SUPPORT_PATH'] + "/lib/escape.rb"
text = STDIN.read
# text="read.csv"
file = `find /Library/Frameworks/R.framework/Versions/Current/Resources/library -name #{text}.tex -print`
if file.empty?
  matches = `grep -r --include CONTENTS ' #{text.gsub(".", "\\.")} ' /Library/Frameworks/R.framework/Versions/Current/Resources/library/*`
  matches.split("\n").each do |line|
		if line.include? "Alias"
			alias_text = line.split(/\s+/).slice(1)
			file = `find /Library/Frameworks/R.framework/Versions/Current/Resources/library -name #{alias_text}.tex -print`
		end
	end
end
file=file.chomp
TextMate.exit_discard if file.empty?
dir = File.dirname(file)
tex = File.read(file)
results = tex.scan(/\\begin\{verbatim\}\n(.*)\\end\{verbatim\}/m)[0][0].split("\n\n")
require 'pp'
results.grep(/^#{text.gsub(".","\.")}\((.*)\)/m) do |line|
  line=line.gsub(/\n|(  )/,"")
  result = ""
  m=line.scan(/(#{text.gsub(".","\.")}\()|(\s*[\w.]+\s*(?=,))|((\s*[\w.]+\s*=\s*)((?:\"((?:[^"]|(?:\\\\\\\"))*)\"(?=,))|[^,"]*(?=,)))|(\)\s*)$/)
 # pp m
  index = 0
  while !m.empty? do
    item = m.shift
    case
    when !item[0].nil?  # Case of the starting part
      result &lt;&lt; e_sn(item[0])
    when !item[1].nil?  # Case of a parameter of the form "name" ( or ...)
      result &lt;&lt; "${#{index+=1}:${#{index+=1}:#{e_sn(item[1])}}#{m.length&gt;1?",":""}}"
    when item[2].nil?   # Case of the last parenthesis
      result &lt;&lt; item[6]
    when item[5].nil?   # Case of "name = item"
      result &lt;&lt; "${#{index+=1}:#{e_sn(item[3])}${#{index+=1}:#{e_sn(item[4])}}#{m.length&gt;1?",":""}}"
    else  # Case of "name = \"item\""
      result &lt;&lt; "${#{index+=1}:#{e_sn(item[3])}\"${#{index+=1}:#{e_sn(item[5])}}\"#{m.length&gt;1?",":""}}"
    end
  end
  print result
end
</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^H</string>
	<key>name</key>
	<string>Snippet from Command Syntax</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>source.r</string>
	<key>uuid</key>
	<string>4D425A1D-E272-4355-8041-311DD4486809</string>
</dict>
</plist>
