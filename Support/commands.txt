.Alias(expr)
.C(name, ..., NAOK = FALSE, DUP = TRUE, PACKAGE)
.Call(name, ..., PACKAGE)
.Call.graphics(name, ..., PACKAGE)
.Defunct(new, package = NULL)
.Deprecated(new, package=NULL)
.Export(...)
.External(name, ..., PACKAGE)
.External.graphics(name, ..., PACKAGE)
.First.lib(libname, pkgname)
.Fortran(name, ..., NAOK = FALSE, DUP = TRUE, PACKAGE)
.Import(...)
.ImportFrom(name, ...)
.Internal(call)
.Last.lib(libpath)
.MFclass(x)
.NotYetImplemented()
.NotYetUsed(arg, error = TRUE)
.Primitive(name)
.S3method(generic, class, method)
.Script(interpreter, script, args, ...)
.Tcl(...)
.Tcl.args(...)
.Tcl.args.objv(...)
.Tcl.callback(...)
.Tcl.objv(objv)
.Tk.ID(win)
.Tk.newwin(ID)
.Tk.subwin(parent)
.checkMFClasses(cl, m, ordNotOK = FALSE)
.classEnv(ClassDef1)))
.deparseOpts(control)
.dynLibs(new)
.find.package(package, lib.loc = NULL, quiet = FALSE, verbose = getOption("verbose"))
.getRequiredPackages(file = "DESCRIPTION", quietly = FALSE, useImports = FALSE)
.getRequiredPackages2(pkgInfo, quietly = FALSE, lib.loc = NULL, useImports = FALSE)
.getXlevels(Terms, m)
.handleSimpleError(h, msg, call)
.libPaths(new) verbose = getOption("verbose"), file.ext = .Platform$dynlib.ext, ...)
.mergeExportMethods(new, ns)
.onAttach(libname, pkgname)
.onLoad(libname, pkgname)
.onUnload(libpath)
.path.package(package, quiet = FALSE)
.readRDS(file, refhook = NULL)
.saveRDS(object, file = "", ascii = FALSE, version = NULL, compress = FALSE, refhook = baseenv())
.signalSimpleWarning(msg, call)
.standard_regexps()
.subset(x, ...)
.subset2(x, ...)
ACF(object, maxLag, ...)
ACF(object, maxLag, resType, ...)
ACF(object, maxLag, resType, form, na.action, ...)
AIC(object, ..., k = 2)
ARMAacf(ar = numeric(0), ma = numeric(0), lag.max = r, pacf = FALSE)
ARMAtoMA(ar = numeric(0), ma = numeric(0), lag.max)
Arg(x)
Arith(e1, e2)
BIC(object, ...)
Box.test(x, lag = 1, type = c("Box-Pierce", "Ljung-Box"))
C(object, contr, how.many, ...)
CRAN.packages(CRAN = getOption("repos"), method, contriburl = contrib.url(CRAN))
Compare(e1, e2)
Complex(z)
Conj(x)
Dim(object, ...)
Dim(object, groups, ...)
EL.profile(y, tmin = min(y) + 0.1, tmax = max(y) - 0.1, n.t = 25,  u = function(y, t) y - t)
Gamma(link = "inverse")
HoltWinters(x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c("additive", "multiplicative"), start.periods = 3, l.start = NULL, b.start = NULL, s.start = NULL, optim.start = c(alpha = 0.3, beta = 0.1, gamma = 0.1), optim.control = list())
I(x)
IQR(x, na.rm = FALSE)
ISOdate(year, month, day, hour = 12, min = 0, sec = 0, tz = "GMT")
ISOdatetime(year, month, day, hour, min, sec, tz = "")
Im(x)
Initialize(object, data, ...)
Initialize(object, data, conLin, control, ...)
Initialize(object, data, control, ...)
Initialize(object, data, groups, conLin, control, ...)
KalmanForecast(n.ahead = 10, mod, fast=TRUE)
KalmanLike(y, mod, nit = 0, fast=TRUE)
KalmanRun(y, mod, nit = 0, fast=TRUE)
KalmanSmooth(y, mod, nit = 0)
Kaver(fs, nsim, ...)
Kenvl(fs, nsim, ...)
Kfn(pp, fs, k=100)
LDEsysMat(pars, incidence)
La.chol(x)
La.chol2inv(x, size = ncol(x))
La.eigen(x, symmetric, only.values = FALSE, method = c("dsyevr", "dsyev"))
La.svd(x, nu = min(n, p), nv = min(n, p), method = c("dgesdd", "dgesvd"))
Machine()
Math(x)
Math(x, ...)
Math2(x, digits)
MethodAddCoerce(method, argName, thisClass, methodClass)
MethodsList(.ArgName, ...)
MethodsListSelect(f, env, mlist, fEnv, finalDefault, evalArgs, useInherited, fdef, resetAllowed)
Mod(x)
NCOL(x)
NLSstAsymptotic(xy)
NLSstClosestX(xy, yval)
NLSstLfAsymptote(xy)
NLSstRtAsymptote(xy)
NROW(x)
Names(object, ...)
Names(object, asList, ...)
Names(object, data, exclude, ...)
NextMethod(generic = NULL, object = NULL, ...)
Null(M)
Ops(e1, e2)
PP.test(x, lshort = TRUE)
Platform()
Predict.matrix(object,data)
PredictMat(object,data)
Psim(n)
Quote()
R.Version()
R.home(component="home")
RNGkind(kind = NULL, normal.kind = NULL)
RNGversion(vstr)
RSiteSearch(string, restrict = c("Rhelp02a", "functions", "docs"), format = "normal", sortby = "score", matchesPerPage = 20)
Rapp.updates()
Rd_db(package, dir, lib.loc = NULL)
Rd_parse(file, text = NULL)
Rdindex(RdFiles, outFile = "", type = NULL, width = 0.9 * getOption("width"), indent = NULL)
Re(x)
Recall(...)
Rows(x, which)
Rprof(filename = "Rprof.out", append = FALSE, interval = 0.02)
Rtangle()
RtangleSetup(file, syntax, output = NULL, annotate = TRUE, split = FALSE, prefix = TRUE, quiet = FALSE)
RtangleWritedoc(object, chunk)
RweaveChunkPrefix(options)
RweaveEvalWithOpt(expr, options)
RweaveLatex()
RweaveLatexOptions(options)
RweaveLatexSetup(file, syntax, output = NULL, quiet = FALSE, debug = FALSE, echo = TRUE, eval  =  TRUE, split = FALSE, stylepath = TRUE, pdf = TRUE, eps = TRUE)
RweaveTryStop(err, options)
SOM(data, grid = somgrid(), rlen = 10000, alpha, radii, init)
SSD(object, ...)
SSI(n, r)
SSasymp(input, Asym, R0, lrc)
SSasympOff(input, Asym, lrc, c0)
SSasympOrig(input, Asym, lrc)
SSbiexp(input, A1, lrc1, A2, lrc2)
SSfol(Dose, input, lKe, lKa, lCl)
SSfpl(input, A, B, xmid, scal)
SSgompertz(x, Asym, b2, b3)
SSlogis(input, Asym, xmid, scal)
SSmicmen(input, Vm, K)
SSweibull(x, Asym, Drop, lrc, pwr)
Shepard(d, x, p = 2)
SignatureMethod(names, signature, definition)
Stangle(file, driver = Rtangle(), syntax = getOption("SweaveSyntax"), ...)
Strauss(n, c=0, r)
StructTS(x, type = c("level", "trend", "BSM"), init = NULL, fixed = NULL, optim.control = NULL)
Summary(x, ...)
Summary(x, ..., na.rm = FALSE)
Surv(time, event)
Sweave(file, driver = RweaveLatex(), syntax = getOption("SweaveSyntax"), ...)
SweaveHooks(options, run = FALSE, envir = .GlobalEnv)
SweaveSyntConv(file, syntax, output = NULL)
Sys.Date()
Sys.getenv(x)
Sys.getlocale(category = "LC_ALL")
Sys.getpid()
Sys.info()
Sys.localeconv()
Sys.putenv(...)
Sys.setlocale(category = "LC_ALL", locale = "")
Sys.sleep(time)
Sys.time()
Sys.timezone()
TukeyHSD(x, which, ordered = FALSE, conf.level = 0.95, ...)
URLdecode(URL)
URLencode(URL, reserved = FALSE)
UseMethod(generic, object)
VarCorr(x, sigma, rdig)
Variogram(object, distance, ...)
Variogram(object, distance, form, resType, data, na.action, maxDist, length.out, collapse, nint, breaks, robust, metric, ...)
Variogram(object, distance, sig2, length.out, ...)
Variogram(object, distance, sig2, length.out, FUN, ...)
Version()
X11(display = "", width = 7, height = 7, pointsize = 12, gamma = 1, colortype = getOption("X11colortype"), maxcubesize = 256, bg = "transparent", canvas = "white", fonts = getOption("X11fonts"))
X11Font(font)
X11Fonts(...)      
abbreviate(names.arg, minlength = 4, use.classes = TRUE, dot = FALSE)
abc.ci(data, statistic, index=1, strata=rep(1, n), conf=0.95,  eps=0.001/n, ...)
abline(a, b, untf = FALSE, ...)
abline(coef=, untf = FALSE, ...)
abline(h=, untf = FALSE, ...)
abline(reg=, untf = FALSE, ...)
abline(v=, untf = FALSE, ...)
abs(x)
absolute.size(unit)
acf(x, lag.max = NULL, type = c("correlation", "covariance", "partial"), plot = TRUE, na.action = na.fail, demean = TRUE, ...)
acf2AR(acf)
acos(x)
acosh(x)
add.scope(terms1, terms2)
add1(object, scope, ...)
add1(object, scope, scale = 0, test = c("none", "Chisq"), k = 2, trace = FALSE, ...)
add1(object, scope, scale = 0, test = c("none", "Chisq", "F"), x = NULL, k = 2, ...)
addGrob(gTree, child, gPath = NULL, strict = FALSE, grep = FALSE, global = FALSE)
addNextMethod(method, f, mlist, optional, envir)
addTaskCallback(f, data = NULL, name = character(0))
addTclPath(path = ".")
addmargins(A, margin = 1:length(dim(A)), FUN = sum, quiet = FALSE)
addterm(object, ...)
addterm(object, scope, scale = 0, test = c("none", "Chisq"), k = 2, sorted = FALSE, trace = FALSE, ...)
addterm(object, scope, scale = 0, test = c("none", "Chisq", "F"), k = 2, sorted = FALSE, ...)
addterm(object, scope, scale = 0, test = c("none", "Chisq", "F"), k = 2, sorted = FALSE, trace = FALSE, ...)
agexact.fit(x, y, strata, offset, init, control, weights, method, rownames) 
aggregate(x, ...)
aggregate(x, by, FUN, ...)
aggregate(x, nfrequency = 1, FUN = sum, ndeltat = 1, ts.eps = getOption("ts.eps"), ...)
agnes(x, diss = inherits(x, "dist"), metric = "euclidean", stand = FALSE, method = "average", par.method, keep.diss = n < 100, keep.data = !diss)
agreg.fit(x, y, strata, offset, init, control, weights, method, rownames)
agrep(pattern, x, ignore.case = FALSE, value = FALSE, max.distance = 0.1)
alarm()
alias(object, ...)
alias(object, complete = TRUE, partial = FALSE, partial.pattern = FALSE, ...)
alias(object, data, ...)
alist(...)
all(..., na.rm = FALSE)
all.equal(target, current, ...)
all.equal(target, current, tolerance = .Machine$double.eps ^ 0.5, scale = NULL, ...)
all.names(expr, functions = TRUE, max.names = 200, unique = FALSE)
all.vars(expr, functions = FALSE, max.names = 200, unique = TRUE)
allCoef(..., extract)
allGenerics(where, searchForm = FALSE)
allNames(x)
anova(object, ...)
anova(object, ...,  test = NULL)
anova(object, ..., dispersion = NULL, test = NULL)
anova(object, ..., test = "Chisq")
anova(object, ..., test = c("Pillai", "Wilks", "Hotelling-Lawley", "Roy", "Spherical"), Sigma = diag(nrow = p), T = Thin.row(proj(M) - proj(X)), M = diag(nrow = p), X = ~0, idata = data.frame(index = seq(length=p)))
anova(object, ..., test, type, adjustSigma, Terms, L, verbose)
anova.gam(object, ..., dispersion = NULL, test = NULL)
anova.lmlist(object, ..., scale = 0, test = "F")
anovalist.lm(object, ..., test = NULL)
anovalist.trls(object, ...)
ansari.test(formula, data, subset, na.action, ...)
ansari.test(x, ...)
ansari.test(x, y, alternative = c("two.sided", "less", "greater"), exact = NULL, conf.int = FALSE, conf.level = 0.95, ...)
any(..., na.rm = FALSE)
aov(formula, data = NULL, projections = FALSE, qr = TRUE, contrasts = NULL, ...) yleft, yright, rule = 1, f = 0, ties = mean)
aperm(a, perm, resize = TRUE)
append(x, values, after = length(x))
apply(X, MARGIN, FUN, ...)
applyEdit(x, edit)
applyEdits(x, edits)
approxfun(x, y = NULL,       method="linear", yleft, yright, rule = 1, f = 0, ties = mean)
apropos(what, where = FALSE, mode = "any")
ar(x, aic = TRUE, order.max = NULL, method=c("yule-walker", "burg", "ols", "mle", "yw"), na.action, series, ...)
ar.burg(x, ...)
ar.burg(x, aic = TRUE, order.max = NULL, na.action = na.fail, demean = TRUE, series, var.method = 1, ...)
ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail, demean = TRUE, series, ...)
ar.ols(x, aic = TRUE, order.max = NULL, na.action = na.fail, demean = TRUE, intercept = demean, series, ...)
ar.yw(x, ...)
ar.yw(x, aic = TRUE, order.max = NULL, na.action = na.fail, demean = TRUE, series, ...)
ar.yw(x, aic = TRUE, order.max = NULL, na.action = na.fail, demean = TRUE, series, var.method = 1, ...)
area(f, a, b, ..., fa = f(a, ...), fb = f(b, ...), limit = 10, eps = 1e-05)
args(name)
arima(x, order = c(0, 0, 0), seasonal = list(order = c(0, 0, 0), period = NA), xreg = NULL, include.mean = TRUE, transform.pars = TRUE, fixed = NULL, init = NULL, method = c("CSS-ML", "ML", "CSS"), n.cond, optim.control = list(), kappa = 1e6)
arima.sim(model, n, rand.gen = rnorm, innov = rand.gen(n, ...), n.start = NA, ...)
arima0(x, order = c(0, 0, 0), seasonal = list(order = c(0, 0, 0), period = NA), xreg = NULL, include.mean = TRUE, delta = 0.01, transform.pars = TRUE, fixed = NULL, init = NULL, method = c("ML", "CSS"), n.cond, optim.control = list())
arima0.diag(...)
array(data = NA, dim = length(data), dimnames = NULL)
arrows(x0, y0, x1, y1, length = 0.25, angle = 30, code = 2, col = par("fg"), lty = NULL, lwd = par("lwd"), xpd = NULL)
arrowsGrob(x = c(0.25, 0.75), y = 0.5, default.units = "npc", grob = NULL, angle = 30, length = unit(0.25, "inches"), ends = "last", type = "open", name = NULL, gp = gpar(), vp = NULL)
as.Date(x, ...)
as.Date(x, format = "", ...)
as.POSIXct(x, tz = "")
as.POSIXlt(x, tz = "")
as.array(x)
as.call(x)
as.character(x)
as.character(x, ...)
as.complex(x, ...)
as.data.frame(x, row.names = NULL, optional = FALSE)
as.data.frame.difftime(x, row.names = NULL, optional = FALSE)
as.data.frame.table(x, row.names = NULL, optional = FALSE, responseName = "Freq")
as.date(x, order = "mdy", ...)
as.dendrogram(object, ...)
as.dendrogram(object, hang = -1, ...)
as.difftime(tim, format = "%X")
as.dist(m, diag = FALSE, upper = FALSE)
as.double(x, ...)
as.environment(object)
as.expression(x, ...)
as.factor(x)
as.factorOrShingle(x, subset, drop)
as.formula(object, env = parent.frame())
as.function(x, ...)
as.function(x, envir = parent.frame(), ...)
as.hclust(x, ...)
as.integer(x, ...)
as.list(x, ...)
as.list.environment(x, all.names=FALSE, ...)
as.logical(x, ...)
as.matrix(x)
as.matrix.ratetable(x)
as.name(x)
as.numeric(x, ...)
as.ordered(x)
as.pairlist(x)
as.person(x)
as.personList(x)
as.polySpline(object, ...)
as.qr(x)
as.raw(x)
as.real(x, ...)
as.shingle(x)
as.single(x, ...)
as.stepfun(x, ...)
as.symbol(x)
as.table(x, ...)
as.tclObj(x, drop=FALSE)
as.ts(x, ...)
as.vector(x, mode = "any")
asMethodDefinition(def, signature, sealed = FALSE)
asNamespace(ns, base.OK = TRUE)
asOneFormula(..., omit)
asOneSidedFormula(object)
asTable(object)
asVector(object)
asin(x)
asinh(x)
assign(x, value, pos = -1, envir = as.environment(pos), inherits = FALSE, immediate = TRUE)
assignInNamespace(x, value, ns, pos = -1, envir = as.environment(pos))
assocplot(x, col = c("black", "red"), space = 0.3, main = NULL, xlab = NULL, ylab = NULL)
atan(x)
atan2(y, x)
atanh(x)
attach(what, pos = 2, name = deparse(substitute(what)), warn.conflicts=TRUE)
attr(x, which)
attr.all.equal(target, current, ...)
attrassign(object, tt,...)
attrassign(object,...)
attributes(obj)
augPred(object, primary, minimum, maximum, length.out, ...)
autoload(name, package, reset = FALSE, ...)
autoloader(name, package, ...)
available.packages(contriburl = contrib.url(getOption("repos")), method)
ave(x, ..., FUN = mean)
axTicks(side, axp = NULL, usr = NULL, log = NULL)
axis(side, at = NULL, labels = TRUE, tick = TRUE, line = NA, pos = NA, outer = FALSE, font = NA, vfont = NULL, lty = "solid", lwd = 1, col = NULL, hadj = NA, padj = NA, ...)
axis.Date(side, x, at, format, labels = TRUE, ...)
axis.POSIXct(side, x, at, format, labels = TRUE, ...)
backSpline(object)
backsolve(r, x, k= ncol(r), upper.tri = TRUE, transpose = FALSE)
balanceMethodsList(mlist, args, check = TRUE)
balancedGrouped(form, data, labels=NULL, units=NULL)
bandwidth.kernel(k)
banking(dx, dy)
bannerplot(x, w = rev(x$height), fromLeft = TRUE, main=NULL, sub=NULL, xlab = "Height",  adj = 0, col = c(2, 0), border = 0, axes = TRUE, frame.plot = axes, rev.xax = !fromLeft, xax.pretty = TRUE, labels = NULL, nmax.lab = 35, max.strlen = 5, yax.do = axes && length(x$order) <= nmax.lab, yaxRight = fromLeft, y.mar = 2.4 + max.strlen/2.5, ...)
barchart(x, ...)
barchart(x, data = NULL, groups = TRUE, origin = 0, stack = TRUE, ...)
barchart(x, data, panel = "panel.barchart", box.ratio = 2, ...)
barplot(height, ...)
barplot(height, width = 1, space = NULL, names.arg = NULL, legend.text = NULL, beside = FALSE, horiz = FALSE, density = NULL, angle = 45, col = NULL, border = par("fg"), main = NULL, sub = NULL, xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL, xpd = TRUE, log = "", axes = TRUE, axisnames = TRUE, cex.axis = par("cex.axis"), cex.names = par("cex.axis"), inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0, add = FALSE, ...)
bartlett.test(formula, data, subset, na.action, ...)
bartlett.test(x, ...)
bartlett.test(x, g, ...)
basehaz(fit,centered=TRUE)
basename(path)
batchSOM(data, grid = somgrid(), radii, init)
bcv(x, nb = 1000, lower, upper)
besselI(x, nu, expon.scaled = FALSE)
besselJ(x, nu)
besselK(x, nu, expon.scaled = FALSE)
besselY(x, nu)
beta(a, b)
bindingIsActive(sym, env)
bindingIsLocked(sym, env)
bindtextdomain(domain, dirname = NULL)
binom.test(x, n, p = 0.5, alternative = c("two.sided", "less", "greater"), conf.level = 0.95)
binomial(link = "logit")
biplot(x, ...)
biplot(x, choices = 1:2, scale = 1, pc.biplot = FALSE, ...)
biplot(x, y, var.axes = TRUE, col, cex = rep(par("cex"), 2), xlabs = NULL, ylabs = NULL, expand = 1, xlim  = NULL, ylim  = NULL, arrow.len = 0.1, main = NULL, sub = NULL, xlab = NULL, ylab = NULL, ...)
bitmap(file, type = "png256", height = 6, width = 6, res = 72, pointsize, ...)
bkde(x, kernel = "normal", canonical = FALSE, bandwidth, gridsize = 401, range.x, truncate = TRUE)
bkde2D(x, bandwidth, gridsize=c(51, 51), range.x, truncate=TRUE)
bkfe(x, drv, bandwidth, gridsize = 401, range.x, binned = FALSE, truncate = TRUE)
body(fun = sys.function(sys.parent()))
boot(data, statistic, R, sim="ordinary", stype="i",  strata=rep(1,n), L=NULL, m=0, weights=NULL,  ran.gen=function(d, p) d, mle=NULL, ...)
boot.array(boot.out, indices=)
boot.ci(boot.out, conf = 0.95, type = "all",  index = 1:min(2,length(boot.out$t0)), var.t0 = NULL,  var.t = NULL, t0 = NULL, t = NULL, L = NULL, h = function(t) t, hdot = function(t) rep(1,length(t)), hinv = function(t) t, ...)
box(which = "plot", lty = "solid", ...)
boxcox(object, lambda = seq(-2, 2, 1/10), plotit = TRUE, interp, eps = 1/50, xlab = expression(lambda), ylab = "log-Likelihood", ...)
boxplot(formula, data = NULL, ..., subset, na.action = NULL)
boxplot(x, ...)
boxplot(x, ..., range = 1.5, width = NULL, varwidth = FALSE, notch = FALSE, outline = TRUE, names, plot = TRUE, border = par("fg"), col = NULL, log = "", pars = list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5), horizontal = FALSE, add = FALSE, at = NULL)
boxplot.stats(x, coef = 1.5, do.conf = TRUE, do.out = TRUE)
bquote(expr, where = parent.frame())
browse.pkgs(where = c("CRAN", "BIOC"), type = c("binary", "source"), contriburl, global = FALSE)
browse.update.pkgs(where = c("CRAN", "BIOC"), type = c("binary", "source"), in.place = TRUE)
browseAll()
browseEnv(envir = .GlobalEnv, pattern, excludepatt = "^last\\.warning", html = .Platform$OS.type != "mac", expanded = TRUE, properties = NULL, main = NULL, debugMe = FALSE)
browseURL(url, browser = getOption("browser"))
browser()
bs(x, df = NULL, knots = NULL, degree = 3, intercept = FALSE, Boundary.knots = range(x))
bug.report(subject = "", ccaddress = Sys.getenv("USER"), method = getOption("mailer"), address = "r-bugs@r-project.org", file = "R.bug.report")
buildVignettes(package, dir, lib.loc = NULL, quiet = TRUE)
bw.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax, method=c("ste", "dpi"))
bw.bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax)
bw.nrd(x)
bw.nrd0(x)
bw.ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax)
bwplot(x, ...)
bwplot(x, data, panel = "panel.bwplot", box.ratio = 1, ..., horizontal, subset = TRUE)
bxp(z, notch = FALSE, width = NULL, varwidth = FALSE, outline = TRUE, notch.frac = 0.5, log = "", border = par("fg"), col = par("bg"), pars = NULL, frame.plot = axes, horizontal = FALSE, add = FALSE, at = NULL, show.names = NULL, ...)
by(data, INDICES, FUN, ...)
bzfile(description, open = "", encoding = getOption("encoding"))
c(..., recursive = FALSE)
c(..., recursive=FALSE)
cacheGenericsMetaData(f, fdef, attach = TRUE, where, package, methods)
cacheMetaData(where, attach = TRUE, searchWhere)
cacheMethod(f, sig, def, args, fdef)
call(name, ...)
callGeneric(...)
callNextMethod(...)
cancor(x, y, xcenter = TRUE, ycenter = TRUE)
canonical.theme(name, color)
capabilities(what = NULL)
capture.output(..., file = NULL, append = FALSE)
case.names(object, ...)
case.names(object, full = FALSE, ...)
casefold(x, upper = FALSE)
cat(... , file = "", sep = " ", fill = FALSE, labels = NULL, append = FALSE)
cbind(..., deparse.level = 1)
cbind2(x, y)
ccf(x, y, lag.max = NULL, type = c("correlation", "covariance"), plot = TRUE, na.action = na.fail, ...)
cch(formula, data = sys.parent(), subcoh, id, cohort.size, method = c("Prentice", "SelfPrentice", "LinYing"))
cdplot(formula, data = list(), plot = TRUE, tol.ylab = 0.05, bw = "nrd0", n = 512, from = NULL, to = NULL, col = NULL, border = 1, main = "", xlab = NULL, ylab = NULL, yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ..., subset = NULL)
cdplot(x, ...)
cdplot(x, y, plot = TRUE, tol.ylab = 0.05, bw = "nrd0", n = 512, from = NULL, to = NULL, col = NULL, border = 1, main = "", xlab = NULL, ylab = NULL, yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ...)
ceiling(x)
censboot(data, statistic, R, F.surv, G.surv, strata=matrix(1,n,2), sim="ordinary", cox=NULL, index=c(1, 2), ...) t = NULL, bias.adj = FALSE, alpha = NULL, ...)
charToRaw(x)
character(length = 0)
charmatch(x, table, nomatch = NA)
chartr(old, new, x)
check.options(new, name.opt, reset = FALSE, assign.opt = FALSE, envir = .GlobalEnv, check.attributes = c("mode", "length"), override.check = FALSE)
checkCRAN(method)
checkDocFiles(package, dir, lib.loc = NULL)
checkDocStyle(package, dir, lib.loc = NULL)
checkFF(package, dir, file, lib.loc = NULL, verbose = getOption("verbose"))
checkMD5sums(pkg, dir)
checkReplaceFuns(package, dir, lib.loc = NULL)
checkS3methods(package, dir, lib.loc = NULL)
checkSlotAssignment(obj, name, value)
checkTnF(package, dir, file, lib.loc = NULL)
checkVignettes(package, dir, lib.loc = NULL, tangle = TRUE, weave = TRUE, workdir = c("tmp", "src", "cur"), keepfiles = FALSE)
childNames(gTree)
chisq.test(x, y = NULL, correct = TRUE, p = rep(1/length(x), length(x)), rescale.p = FALSE, simulate.p.value = FALSE, B = 2000)
chol(x, pivot = FALSE,  LINPACK = pivot)
chol2inv(x, size = NCOL(x), LINPACK = FALSE)
choose(n, k)
chooseCRANmirror(graphics = TRUE)
chull(x, y = NULL)
circleGrob(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL, gp=gpar(), vp=NULL)
citEntry(entry, textVersion, header = NULL, footer = NULL, ...)
citFooter(...)
citHeader(...)
citation(package = "base", lib.loc = NULL)
clara(x, k, metric = "euclidean", stand = FALSE, samples = 5, sampsize = min(n, 40 + 2 * k), trace = 0, medoids.x = TRUE, keep.data = medoids.x, rngR = FALSE)
class(x)
class.ind(cl)
classMetaName(name)
clearNames(object)
clogit(formula, data, method=c("exact", "approximate"), na.action=getOption("na.action"), subset=NULL,control=coxph.control())
close(con, ...)
close(con, type = "rw", ...)
close.screen(n, all.screens = FALSE)
close.socket(socket, ...)
closeAllConnections()
cloud(x, ...)
cloud(x, data, aspect = c(1, 1), panel = "panel.cloud", scales = list(distance = rep(1, 3), arrows = TRUE), zlab, zlim,  zoom = 0.8, ...)
cloud(x, type = "h", ...)
clusplot(x, ...)
clusplot(x, clus, diss = FALSE, cor = TRUE, stand = FALSE, lines = 2, shade = FALSE, color = FALSE, labels= 0, plotchar = TRUE, col.p = "dark green", col.txt = col.p, col.clus = if(color) c(2, 4, 6, 3) else 5, span = TRUE, xlim = NULL, ylim = NULL, main = paste("CLUSPLOT(", deparse(substitute(x)),")"), verbose = getOption("verbose"), ...)
clusplot(x, main = NULL, dist = NULL, ...)
cluster(x)
cm(x)
cm.colors(n)
cmdscale(d, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE)
co.intervals(x, number = 6, overlap = 0.5)
codes(x, ...)
codoc(package, dir, lib.loc = NULL, use.values = NULL, verbose = getOption("verbose"))
codocClasses(package, lib.loc = NULL)
codocData(package, lib.loc = NULL)
coef(object, ...)
coef(object, augFrame, data, which, FUN, omitGroupingFactor, ...)
coef(object, augFrame, level, data, which, FUN,  omitGroupingFactor, subset, ...)
coef(object, unconstrained, ...)
coef(object, unconstrained, allCoef, ...)
coef.hclust(object, ...)
coefficients(object, ...)
col(x, as.factor = FALSE)
col.whitebg()
col2rgb(col, alpha = FALSE)
colMeans(x, na.rm = FALSE, dims = 1)
collapse(object, ...)
collapse(object, collapseLevel, displayLevel, outer, inner, preserve, FUN, subset, ...)
colnames(x, do.NULL = TRUE, prefix = "col")
colorConverter(toXYZ, fromXYZ, name, white=NULL)
colorRamp(colors, bias = 1, space = c("rgb", "Lab"), interpolate = c("linear", "spline"))
colorRampPalette(colors, ...)
colors()
colours()
commandArgs()
comment(x)
compareFits(object1, object2, which)
comparePred(object1, object2, primary, minimum, maximum, length.out, level, ...)
compareVersion(a, b)
complete.cases(...)
completeClassDefinition(Class, ClassDef, where, doExtends)
completeExtends(ClassDef, class2, extensionDef, where)
complex(length.out = 0, real = numeric(), imaginary = numeric(), modulus = 1, argument = 0)
computeRestarts(cond = NULL)
con2tr(obj)
condense(train, class, store, trace = TRUE)
conditionCall(c)
conditionMessage(c)
confint(object, parm, level = 0.95, ...)
confint(object, parm, level = 0.95, trace = FALSE, ...)
conflicts(where = search(), detail = FALSE)
conformMethod(signature, mnames, fnames, f)
constrOptim(theta, f, grad, ui, ci, mu = 1e-04, control = list(), method = if(is.null(grad)) "Nelder-Mead" else "BFGS", outer.iterations = 100, outer.eps = 1e-05, ...)
contour(x = seq(0, 1, len = nrow(z)), y = seq(0, 1, len = ncol(z)), z, nlevels = 10, levels = pretty(zlim, nlevels), labels = NULL, xlim = range(x, finite = TRUE), ylim = range(y, finite = TRUE), zlim = range(z, finite = TRUE), labcex = 0.6, drawlabels = TRUE, method = "flattest", vfont = c("sans serif", "plain"), axes = TRUE, frame.plot = axes, col = par("fg"), lty = par("lty"), lwd = par("lwd"), add = FALSE, ...)
contour(x, ...)
contourLines(x = seq(0, 1, len = nrow(z)), y = seq(0, 1, len = ncol(z)), z, nlevels = 10, levels = pretty(range(z, na.rm=TRUE), nlevels))
contourplot(x, ...)
contourplot(x, data = parent.frame(), panel = "panel.contourplot", cuts = 7, labels = TRUE, contour = TRUE, pretty = TRUE, region = FALSE, ...)
contourplot(x, data, aspect = "iso", ...)
contr.SAS(n, contrasts = TRUE)
contr.helmert(n, contrasts = TRUE)
contr.poly(n, scores = 1:n, contrasts = TRUE)
contr.sdif(n, contrasts = TRUE)
contr.sum(n, contrasts = TRUE)
contr.treatment(n, base = 1, contrasts = TRUE)
contrasts(x, contrasts = TRUE)
contrib.url(repos, type = getOption("pkgType"))
convertColor(color, from, to, from.ref.white, to.ref.white, scale.in=1, scale.out=1, clip=TRUE)
convertHeight(x, unitTo, valueOnly = FALSE) 
convertNative(unit, dimension="x", type="location")
convertUnit(x, unitTo, axisFrom = "x", typeFrom = "location", axisTo = axisFrom, typeTo = typeFrom, valueOnly = FALSE)
convertWidth(x, unitTo, valueOnly = FALSE) 
convertX(x, unitTo, valueOnly = FALSE) 
convertY(x, unitTo, valueOnly = FALSE) 
convolve(x, y, conj = TRUE, type = c("circular", "open", "filter"))
cooks.distance(model, ...)
cooks.distance(model, infl = influence(model, do.coef = FALSE), res = infl$pear.res, dispersion = summary(model)$dispersion, hat = infl$hat, ...)
cooks.distance(model, infl = lm.influence(model, do.coef = FALSE), res = weighted.residuals(model), sd = sqrt(deviance(model)/df.residual(model)), hat = infl$hat, ...)
cophenetic(x)
coplot(formula, data, given.values, panel = points, rows, columns, show.given = TRUE, col = par("fg"), pch = par("pch"),  bar.bg = c(num = gray(0.8), fac = gray(0.95)), xlab = c(x.name, paste("Given :", a.name)), ylab = c(y.name, paste("Given :", b.name)), subscripts = FALSE, axlabels = function(f) abbreviate(levels(f)), number = 6, overlap = 0.5, xlim, ylim, ...) 
cor(x, y = NULL, use = "all.obs", method = c("pearson", "kendall", "spearman"))
cor.test(formula, data, subset, na.action, ...)
cor.test(x, ...)
cor.test(x, y, alternative = c("two.sided", "less", "greater"), method = c("pearson", "kendall", "spearman"), exact = NULL, conf.level = 0.95, ...)
corAR1(value, form, fixed)
corARMA(value, form, p, q, fixed)
corCAR1(value, form, fixed)
corCompSymm(value, form, fixed)
corExp(value, form, nugget, metric, fixed)
corFactor(object, ...)
corGaus(value, form, nugget, metric, fixed)
corLin(value, form, nugget, metric, fixed)
corMatrix(object, ...)
corMatrix(object, covariate, corr, ...)
corNatural(value, form, fixed)
corRatio(value, form, nugget, metric, fixed)
corSpatial(value, form, nugget, type, metric, fixed)
corSpher(value, form, nugget, metric, fixed)
corSymm(value, form, fixed)
corr(d, w=rep(1,nrow(d))/nrow(d))
correlogram(krig, nint, plotit = TRUE,  ...)
corresp(formula, data, ...)
corresp(x, ...)
corresp(x, nf = 1, ...)
corresp(x, y, ...)
cos(x)
cosh(x)
count.fields(file, sep = "", quote = "\"'", skip = 0, blank.lines.skip = TRUE, comment.char = "#")
cov(x, y = NULL, use = "all.obs", method = c("pearson", "kendall", "spearman"))
cov.mcd(...)
cov.mve(...)
cov.rob(x, cor = FALSE, quantile.used = floor((n + p + 1)/2), method = c("mve", "mcd", "classical"), nsamp = "best", seed)
cov.trob(x, wt = rep(1, n), cor = FALSE, center = TRUE, nu = 5, maxit = 25, tol = 0.01)
cov.wt(x, wt = rep(1/nrow(x), nrow(x)), cor = FALSE, center = TRUE)
cov2cor(V)
covratio(model, infl = lm.influence(model, do.coef = FALSE), res = weighted.residuals(model))
cox.zph(fit, transform="km", global=TRUE)
coxpenal.df(hmat, hinv, fdiag, assign.list, ptype, nvar, pen1, pen2, sparse)
coxpenal.fit(x, y, strata, offset, init, control, weights, method, rownames, pcols, pattr, assign)
coxph(formula, data=parent.frame(), weights, subset, na.action, init, control, method=c("efron","breslow","exact"), singular.ok=TRUE, robust=FALSE, model=FALSE, x=FALSE, y=TRUE,... )
coxph.detail(object)
coxph.fit(x, y, strata, offset, init, control, weights, method, rownames)
coxph.wtest(var, b, toler.chol = 1e-09)
cpgram(ts, taper = 0.1, main = paste("Series: ", deparse(substitute(ts))), ci.col = "blue")
crossprod(x, y = NULL)
cum3(a, b=a, c=a, unbiased=TRUE)
cummax(x)
cummin(x)
cumprod(x)
cumsum(x)
current.panel.limits(unit = "native")
current.transform()
current.viewport(vp=NULL)
current.vpPath()
current.vpTree(all=TRUE)
curve(expr, from, to, n = 101, add = FALSE, type = "l", ylab = NULL, log = NULL, xlim = NULL, ...)
cut(x, ...)
cut(x, breaks, labels = NULL, include.lowest = FALSE, right = TRUE, dig.lab = 3, ...)
cut(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE, ...)
cut(x, h, ...)
cutree(tree, k = NULL, h = NULL)
cv.glm(data, glmfit, cost, K) u=function(y, t) { y-t})
cycle(x, ...)
dQuote(x)
daisy(x, metric = c("euclidean","manhattan"), stand = FALSE, type = list())
data(..., list = character(0), package = NULL, lib.loc = NULL, verbose = getOption("verbose"), envir = .GlobalEnv)
data(rats)
data.class(x)
data.entry(..., Modes = NULL, Names = NULL)
data.frame(..., row.names = NULL, check.rows = FALSE, check.names = TRUE)
data.manager()
data.matrix(frame)
data.restore(file, print = FALSE, verbose = FALSE, env = .GlobalEnv)
dataViewport(xData = NULL, yData = NULL, xscale = NULL, yscale = NULL, extension = 0.05, ...)
dataentry(data, modes)
date.ddmmmyy(sdate)
date.mdy(sdate, weekday = FALSE)
date.mmddyy(sdate, sep = "/")
date.mmddyyyy(sdate, sep = "/")
dbeta(x, shape1, shape2, ncp=0, log = FALSE)
dbinom(x, size, prob, log = FALSE)
dcauchy(x, location = 0, scale = 1, log = FALSE)
dchisq(x, df, ncp=0, log = FALSE)
de(..., Modes = list(), Names = NULL)
debug(fun)
debugger(dump = last.dump)
decompose(x, type = c("additive", "multiplicative"), filter = NULL)
defaultDumpName(generic, signature)
defaultPrototype()
delay(x, env = .GlobalEnv)
delayedAssign(x, value, eval.env = parent.frame(1),  assign.env = parent.frame(1))
delete.response(termobj)
delimMatch(x, delim = c("{", "}"), syntax = "Rd")
deltat(x, ...)
demo(topic, package = NULL, lib.loc = NULL, character.only = FALSE, verbose = getOption("verbose"))
dendrapply(X, FUN, ...)
density(x, ...)
density(x, bw = "nrd0", adjust = 1, kernel = c("gaussian", "epanechnikov", "rectangular", "triangular", "biweight", "cosine", "optcosine"), weights = NULL, window = kernel, width, give.Rkern = FALSE, n = 512, from, to, cut = 3, na.rm = FALSE, ...) D (expr, name)
densityplot(x, ...)
densityplot(x, data = parent.frame(), allow.multiple = is.null(groups) || outer, outer = !is.null(groups), auto.key = FALSE, aspect = "fill", panel = if (is.null(groups)) "panel.densityplot" else "panel.superpose", prepanel, scales, strip, groups, xlab, xlim, ylab, ylim, bw, adjust, kernel, window, width, give.Rkern, n = 50, from, to, cut, na.rm, drop.unused.levels = lattice.getOption("drop.unused.levels"), ..., default.scales = list(), panel.groups = "panel.densityplot", subscripts, subset)
densityplot(x, data, xlab, ...)
deparse(expr, width.cutoff = 60, backtick = mode(expr) %in% c("call", "expression", "("), control = "showAttributes")
deriv(expr, namevec, function.arg, tag = ".expr", hessian = FALSE)
deriv3(expr, namevec, function.arg, tag = ".expr", hessian = TRUE)
det(x, ...)
detach(name, pos = 2, version)
determinant(x, logarithm = TRUE, ...)
dev.control(displaylist = c("inhibit", "enable"))
dev.copy(device, ..., which = dev.next())
dev.copy2eps(...)
dev.cur()
dev.interactive()
dev.list()
dev.next(which = dev.cur())
dev.off(which = dev.cur())
dev.prev(which = dev.cur())
dev.print(device = postscript, ...)
dev.set(which = dev.next())
dev2bitmap(file, type = "png256", height = 6, width = 6, res = 72, pointsize, ...)
deviance(object, ...)
dexp(x, rate = 1, log = FALSE)
df(x, df1, df2, log = FALSE)
df.kernel(k)
df.residual(object, ...)
dfbeta(model, ...)
dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)
dfbetas(model, ...)
dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)
dffits(model, infl = , res = )
dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)
dgeom(x, prob, log = FALSE)
dget(file)
dhyper(x, m, n, k, log = FALSE)
diag(x = 1, nrow, ncol= )
diag.panel.splom(x = NULL, varname = NULL, limits, at = NULL, lab = NULL, draw = TRUE, varname.col, varname.cex, varname.font, varname.fontfamily, varname.fontface, axis.text.col, axis.text.alpha, axis.text.cex, axis.text.font,  axis.text.fontfamily, axis.text.fontface, axis.line.col, axis.line.alpha, axis.line.lty, axis.line.lwd, ...)
diana(x, diss = inherits(x, "dist"), metric = "euclidean", stand = FALSE, keep.diss = n < 100, keep.data = !diss)
diff(x, ...)
diff(x, lag = 1, differences = 1, ...)
diffinv(x, ...)
diffinv(x, lag = 1, differences = 1, xi, ...)
difftime(time1, time2, tz = "", units = c("auto", "secs", "mins", "hours", "days", "weeks"))
digamma(x)
dim(x)
dimnames(x)
dir(path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE)
dir.create(path, showWarnings = TRUE, recursive = FALSE)
dirname(path)
dist(x, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)
dlogis(x, location = 0, scale = 1, log = FALSE)
dmultinom(x, size = NULL, prob, log = FALSE)
dnbinom(x, size, prob, mu, log = FALSE)
dnchisq(.)
dnorm(x, mean=0, sd=1, log = FALSE)
do.breaks(endpoints, nint)
do.call(what, args, quote=FALSE)
doPrimitiveMethod(name, def, call= sys.call(sys.parent()), ev= sys.frame(sys.parent(2)))
dose.p(obj, cf = 1:2, p = 0.5)
dotchart(x, labels = NULL, groups = NULL, gdata = NULL, cex = par("cex"), pch = 21, gpch = 21, bg = par("bg"), color = par("fg"), gcolor = par("fg"), lcolor = "gray", xlim = range(x[is.finite(x)]), main = NULL, xlab = NULL, ylab = NULL, ...)
dotplot(...)
dotplot(x, ...)
dotplot(x, data = NULL, groups = TRUE, ...)
dotplot(x, data, panel = "panel.dotplot", ...)
double(length = 0)
downViewport(name, strict=FALSE, recording=TRUE)
download.file(url, destfile, method, quiet = FALSE, mode = "w", cacheOK = TRUE)
download.packages(pkgs, destdir, available = NULL, repos = getOption("repos"), contriburl = contrib.url(repos, type), method, type = getOption("pkgType"))
dpih(x, scalest="minim", level=2, gridsize=401,  range.x=range(x), truncate=TRUE)
dpik(x, scalest="minim", level=2, kernel="normal",    canonical=FALSE, gridsize=401, range.x=range(x),  truncate=TRUE)
dpill(x, y, blockmax = 5, divisor = 20, trim = 0.01, proptrun = 0.05,  gridsize = 401, range.x, truncate = TRUE)
dpois(x, lambda, log = FALSE)
dput(x, file = "", control = "showAttributes")
draw.colorkey(key, draw=FALSE, vp=NULL)
draw.details(x, recording)
draw.key(key, draw=FALSE, vp=NULL)
drawDetails(x, recording)
drop(x)
drop.scope(terms1, terms2)
drop.terms(termobj, dropx = NULL, keep.response = FALSE)
drop1(object, scope, ...)
drop1(object, scope, scale = 0, all.cols = TRUE, test = c("none", "Chisq", "F"), k = 2, ...)
drop1(object, scope, scale = 0, test = c("none", "Chisq"), k = 2, trace = FALSE, ...)
drop1(object, scope, scale = 0, test = c("none", "Chisq", "F"), k = 2, ...)
dropterm(object, scope, scale = 0, test = c("none", "Chisq"), k = 2, sorted = FALSE, trace = FALSE, ...)
dropterm(object, scope, scale = 0, test = c("none", "Chisq", "F"), k = 2, sorted = FALSE, ...)
dropterm(object, scope, scale = 0, test = c("none", "Chisq", "F"), k = 2, sorted = FALSE, trace = FALSE, ...)
dsignrank(x, n, log = FALSE)
dt(x, df, ncp=0, log = FALSE)
dummy.coef(object, ...)
dummy.coef(object, use.na = FALSE, ...)
dump(list, file = "dumpdata.R", append = FALSE,  control = "all", envir = parent.frame(), evaluate = TRUE)
dump.frames(dumpto = "last.dump", to.file = FALSE)
dumpMethod(f, signature, file, where, def)
dumpMethods(f, file, signature, methods, where)
dunif(x, min=0, max=1, log = FALSE)
duplicated(x, incomparables = FALSE, ...)
duplicated(x, incomparables = FALSE, MARGIN = 1, ...)
dweibull(x, shape, scale = 1, log = FALSE)
dwilcox(x, m, n, log = FALSE)
dyn.load(x, local = TRUE, now = TRUE)
dyn.unload(x)
eapply(env, FUN, ..., all.names = FALSE)
ecdf(x)
edit(name = NULL, file = "", title = NULL, editor = getOption("editor"), ...)
edit(name, ...) 
edit(name, edit.row.names = any(rownames(name) != 1:nrow(name)), ...)
edit(name, factor.mode = c("character", "numeric"), edit.row.names = any(row.names(name) != 1:nrow(name)), ...)
editDetails(x, specs)
editGrob(grob, gPath = NULL, ..., strict = FALSE, grep = FALSE, global = FALSE) 
eff.aovlist(aovlist)
effects(object, ...)
effects(object, set.sign = FALSE, ...)
eigen(x, symmetric, only.values = FALSE, EISPACK = FALSE)
el(object, where)
elNamed(x, name, mustFind=FALSE)
ellipsoidPoints(A, d2, loc, n=201)
ellipsoidhull(x, tol=0.01, maxit=5000, ret.wt = FALSE, ret.sqdist = FALSE, ret.pr = FALSE)
emacs(name = NULL, file = "")
empinf(boot.out = NULL, data = NULL, statistic = NULL, type = NULL, stype = NULL ,index = 1, t = NULL, strata = rep(1, n), eps = 0.001, ...)
empty.dump()
encodeString(x, width = 0, quote = "", na.encode = TRUE, justify = c("left", "right", "centre", "none"))
encoded_text_to_latex(x, encoding = c("latin1", "latin2", "latin9", "UTF-8", "utf8"))
end(x, ...)
engine.display.list(on=TRUE)
envelope(boot.out=NULL, mat=NULL, level=0.95, index=1:ncol(mat))
environment(fun = NULL)
environmentIsLocked(env)
eqscplot(x, y, ratio = 1, tol = 0.04, uin, ...)
equal.count(x, ...)
erase.screen(n = )
estVar(object, ...)
eval(expr, envir = parent.frame(), enclos = if(is.list(envir) || is.pairlist(envir))
eval.parent(expr, n = 1)
evalq(expr, envir, enclos)
example(topic, package = NULL, lib.loc = NULL, local = FALSE, echo = TRUE, verbose = getOption("verbose"), setRNG = FALSE, prompt.echo = paste(abbreviate(topic, 6),"> ", sep=""))
exclude.too.far(g1,g2,d1,d2,dist)
exists(x, where = -1, envir = , frame, mode = "any", inherits = TRUE)
existsMethod(f, signature = character(), where)
exp(x)
exp.tilt(L, theta=NULL, t0=0, lambda=NULL, strata=rep(1, length(L))) subset=NULL, iden=FALSE, labels=NULL, ret=FALSE)
expand.grid(...)
expand.model.frame(model, extras, envir = environment(formula(model)), na.expand = FALSE)
expcov(r, d, alpha = 0, se = 1)
expm1(x)
expression(...)
extend.limits(range(as.numeric(x), finite = TRUE)), varname.col, varname.cex, varname.font, varname.fontfamily, varname.fontface, axis.text.col, axis.text.cex, axis.text.font, axis.text.fontfamily, axis.text.fontface, axis.line.col, axis.line.lty, axis.line.lwd, ...)
extendrange(x, r = range(x, na.rm = TRUE), f = 0.05)
extends(class1, class2, maybe=TRUE, fullInfo = FALSE)
extract.lme.cov(b,data,start.level=1)
extract.lme.cov2(b,data,start.level=1)
extractAIC(fit, scale, k = 2, ...)  
factanal(x, factors, data = NULL, covmat = NULL, n.obs = NA, subset, na.action, start = NULL, scores = c("none", "regression", "Bartlett"), rotation = "varimax", control = NULL, ...)
factor(x, levels = sort(unique.default(x), na.last = TRUE), labels = levels, exclude = NA, ordered = is.ordered(x))
factor.scope(factor, scope)
factorial(x)
family(object, ...)
fanny(x, k, diss = inherits(x, "dist"), memb.exp = 2, metric = "euclidean", stand = FALSE, maxit = 500, tol = 1e-15)
fbeta(x, alpha, beta)
fdHess(pars, fun, ..., .relStep=(.Machine$double.eps)^(1/3), minAbsPar=0)
fft(z, inverse = FALSE)
fifo(description = "", open = "", blocking = FALSE, encoding = getOption("encoding"))
file(description = "", open = "", blocking = TRUE, encoding = getOption("encoding"))
file.access(names, mode = 0)
file.append(file1, file2)
file.choose(new = FALSE)
file.copy(from, to, overwrite = FALSE)
file.create(...)
file.edit(..., title = file, editor = getOption("editor"))
file.exists(...)
file.info(...)
file.path(..., fsep = .Platform$file.sep)
file.remove(...)
file.rename(from, to)
file.show(..., header = rep("",nfiles), title = "R Information", delete.file=FALSE, pager=getOption("pager"))
file.symlink(from, to)
file_path_as_absolute(x)
file_path_sans_ext(x)
file_test(op, x, y)
filled.contour(x = seq(0, 1, len = nrow(z)), y = seq(0, 1, len = ncol(z)), z, xlim = range(x, finite=TRUE), ylim = range(y, finite=TRUE), zlim = range(z, finite=TRUE), levels = pretty(zlim, nlevels), nlevels = 20, color.palette = cm.colors, col = color.palette(length(levels) - 1), plot.title, plot.axes, key.title, key.axes, asp = NA, xaxs = "i", yaxs = "i", las = 1, axes = TRUE, frame.plot = axes, ...)
filter(x, filter, method = c("convolution", "recursive"), sides = 2, circular = FALSE, init)
finalDefaultMethod(mlist, fname = "NULL")
find(what, mode = "any", numeric. = FALSE, simple.words = TRUE)
findClass(Class, where, unique = "")
findFunction(f, generic = TRUE, where = topenv(parent.frame()))
findInterval(x, vec, rightmost.closed = FALSE, all.inside = FALSE)
findMethod(f, signature, where)
findRestart(name, cond = NULL)
findUnique(what, message, where)
fisher.test(x, y = NULL, workspace = 200000, hybrid = FALSE, control = list(), or = 1, alternative = "two.sided", conf.int = TRUE, conf.level = 0.95)
fitdistr(x, densfun, start, ...)
fitted(object, ...)
fitted(object, glsFit, ...)
fitted(object, level, asList, ...)
fitted(object, level, conLin, ...)
fitted(object, level, conLin, lmeFit, ...)
fitted(object, subset, asList, ...)
fitted.values(object, ...)
fivenum(x, na.rm = TRUE)
fix(x, ...)
fix.family.link(fam)
fix.family.var(fam)
fixDependence(X1,X2,tol=.Machine$double.eps^.5)
fixInNamespace(x, ns, pos = -1, envir = as.environment(pos), ...)
fixPre1.8(names, where)
fixed.effects(object, ...)
fixef(object, ...)
fligner.test(formula, data, subset, na.action, ...)
fligner.test(x, ...)
fligner.test(x, g, ...)
floor(x)
flush(con)
flush.console()
for(var in seq) expr
force(x)
formXtViX(V,X)
formalArgs(def)
formals(fun = sys.function(sys.parent()))
format(x, ...)
format(x, ..., justify = "none")
format(x, format = "", tz = "", usetz = FALSE, ...)
format(x, format = "", usetz = FALSE, ...)
format(x, trim = FALSE, digits = NULL, nsmall = 0, justify = c("left", "right", "centre", "none"), width = NULL, na.encode = TRUE, scientific = NA, big.mark = "",   big.interval = 3, small.mark = "", small.interval = 5, decimal.mark = ".", ...)
format(x, width = 12, ...)
format.char(x, width = NULL, flag = "-")
format.info(x, digits = NULL, nsmall = 0)
format.pval(pv, digits = max(1, getOption("digits") - 2), eps = .Machine$double.eps, na.form = "NA")
formatC(x, digits = NULL, width = NULL, format = NULL, flag = "", mode = NULL, big.mark = "", big.interval = 3, small.mark = "", small.interval = 5, decimal.mark = ".")
formatDL(x, y, style = c("table", "list"), width = 0.9 * getOption("width"), indent = NULL)
formula(x, ...)
formula(x, asList, ...)
formula.gam(x,...)
forwardsolve(l, x, k= ncol(l), upper.tri = FALSE, transpose = FALSE)
fourfoldplot(x, color = c("#99CCFF", "#6699CC"), conf.level = 0.95, std = c("margins", "ind.max", "all.max"), margin = c(1, 2), space = 0.2, main = NULL, mfrow = NULL, mfcol = NULL)
frailty(x, distribution="gamma", ...)
frailty.gamma(x, sparse = (nclass > 5), theta, df, eps = 1e-05, method = c("em","aic", "df", "fixed"), ...) 
frailty.gaussian(x, sparse = (nclass > 5), theta, df, method = c("reml","aic", "df", "fixed"), ...)
frailty.t(x, sparse = (nclass > 5), theta, df, eps = 1e-05, tdf = 5,method = c("aic", "df", "fixed"), ...)
frame()
frameGrob(layout=NULL, name=NULL, gp=gpar(), vp=NULL)
frequency(x, ...)
frequency.polygon(x, nclass = nclass.freq(x), xlab="", ylab="", ...)
friedman.test(formula, data, subset, na.action, ...)
friedman.test(y, ...)
friedman.test(y, groups, blocks, ...)
ftable(..., exclude = c(NA, NaN), row.vars = NULL, col.vars = NULL)
ftable(formula, data = NULL, subset, na.action, ...)
ftable(x, ...)
full.score(sp,G,family,control,gamma,pearson)
function( arglist ) expr
functionBody(fun=sys.function(sys.parent()))
gEdit(...)
gEditList(...)
gList(...)
gPath(...)
gTree(..., name = NULL, gp = NULL, vp = NULL, children = NULL,  childrenvp = NULL, cl = NULL)
gam(formula,family=gaussian(),data=list(),weights=NULL,subset=NULL, na.action,offset=NULL,control=gam.control(),method=gam.method(), scale=0,knots=NULL,sp=NULL,min.sp=NULL,H=NULL,gamma=1, fit=TRUE,G=NULL,...)
gam.check(b)
gam.control(irls.reg=0.0,epsilon = 1e-06, maxit = 100,globit = 20, mgcv.tol=1e-7,mgcv.half=15,nb.theta.mult=10000, trace = FALSE, rank.tol=.Machine$double.eps^0.5,absorb.cons=TRUE, max.tprs.knots=5000,nlm=list(),optim=list(), outerPIsteps=4) 
gam.fit2(x, y, sp, S=list(),rS=list(),off, H=NULL,  weights = rep(1, nobs), start = NULL, etastart = NULL,  mustart = NULL, offset = rep(0, nobs), family = gaussian(),  control = gam.control(), intercept = TRUE,deriv=TRUE, gamma=1,scale=1,pearson=FALSE,printWarn=TRUE)
gam.method(am="magic",gam="outer",outer="nlm",pearson=FALSE,family=NULL)
gam.outer(lsp,fscale,family,control,method,gamma,G)
gam.side(sm,tol=.Machine$double.eps^.5)
gam2derivative(lsp,args)
gam2objective(lsp,args,printWarn=FALSE)
gam3objective(lsp,args)
gamm(formula,random=NULL,correlation=NULL,family=gaussian(), data=list(),weights=NULL,subset=NULL,na.action,knots=NULL, control=lmeControl(niterEM=0,optimMethod="L-BFGS-B"),niterPQL=20, verbosePQL=TRUE,method="ML",...)
gamma(x)
gamma.dispersion(object, ...)
gamma.shape(object, it.lim = 10, eps.max = .Machine$double.eps^0.25, verbose = FALSE, ...)
gammaCody(x)
gapply(object, which, FUN, form, level, groups, ...)
gaucov(r, d, alpha = 0, se = 1)
gaussian(link = "identity")
gc(verbose = getOption("verbose"), reset=FALSE)
gc.time(on = TRUE)
gcinfo(verbose)
gctorture(on = TRUE)
generic.skeleton(name, fdef, fdefault)
get(x, pos=-1, envir=as.environment(pos), mode="any", inherits=TRUE)
get.gpar(names = NULL)
getAccess(ClassDef) 
getAllMethods(f, fdef, where)
getAllSuperClasses(ClassDef, simpleOnly = TRUE)
getAnywhere(x)
getCConverterDescriptions()
getCConverterStatus()
getCallingDLL(f = sys.function(-1), doStop = FALSE)
getCallingDLLe(e)
getClass(Class, .Force = FALSE, where)
getClassDef(Class, where, package)
getClassName(ClassDef) 
getClassPackage(ClassDef) 
getClasses(where, inherits = missing(where))
getConnection(what)
getCovariate(object, form, data)
getCovariateFormula(object)
getDLLRegisteredRoutines(dll)
getData(object)
getDataPart(object)
getDepList(depMtrx, instPkgs, recursive = TRUE, local = TRUE, reduce = TRUE, lib.loc = NULL)
getExportedValue(ns, name)
getExtends(ClassDef) 
getFromNamespace(x, ns, pos = -1, envir = as.environment(pos))
getFunction(name, generic=TRUE, mustFind=TRUE, where)
getGeneric(f, mustFind=FALSE, where)
getGenerics(where, searchForm = FALSE)
getGraphicsEvent(prompt = "Waiting for input",  onMouseDown = NULL, onMouseMove = NULL, onMouseUp = NULL,  onKeybd = NULL)
getGrob(gTree, gPath, strict = FALSE, grep = FALSE, global = FALSE) 
getGroup(fdef, recursive, where)
getGroupMembers(group, recursive = FALSE, character = TRUE)
getGroups(object, form, level, data, sep)
getGroupsFormula(object, asList, sep)
getHook(hookName)
getInitial(object, data, ...)
getLoadedDLLs()
getMethod(f, signature=character(), where, optional=FALSE, mlist)
getMethods(f, where)
getMethodsForDispatch(f, fdef)
getMethodsForDispatch(f, fdef)), fdef = getGeneric(f, !optional))
getMethodsMetaData(f, where)
getNames()
getNamespace(name)
getNamespaceExports(ns)
getNamespaceImports(ns)
getNamespaceInfo(ns, which)
getNamespaceName(ns)
getNamespaceUsers(ns)
getNamespaceVersion(ns)
getNativeSymbolInfo(name, PACKAGE)
getNumCConverters()
getOption(x)
getPackageName(where)
getProperties(ClassDef) 
getPrototype(ClassDef) 
getResponse(object, form)
getResponseFormula(object)
getRversion()
getS3method(f, class, optional = FALSE)
getSlots(x)
getSubclasses(ClassDef) 
getTaskCallbackNames()
getValidity(ClassDef) 
getVarCov(obj, ...)
getVarCov(obj, individual = 1, ...)
getVarCov(obj, individuals, type = c("random.effects", "conditional", "marginal"), ...)
getVirtual(ClassDef) 
getenv(...)
geterrmessage()
gettext(..., domain = NULL)
gettextf(fmt, ..., domain = NULL)
getwd()
ginv(X, tol = sqrt(.Machine$double.eps))
gl(n, k, length = n*k, labels = 1:n, ordered = FALSE)
glm(formula, family = gaussian, data, weights, subset, na.action, start = NULL, etastart, mustart, offset, control = glm.control(...), model = TRUE, method = "glm.fit", x = FALSE, y = TRUE, contrasts = NULL, ...)
glm.control(epsilon = 1e-8, maxit = 25, trace = FALSE)
glm.convert(object)
glm.diag(glmfit)
glm.fit(x, y, weights = rep(1, nobs), start = NULL, etastart = NULL, mustart = NULL, offset = rep(0, nobs), family = gaussian(), control = glm.control(), intercept = TRUE)
glm.fit.null(x, y, weights, start = NULL, etastart = NULL, mustart = NULL, offset, family = gaussian(), control = glm.control(), intercept = FALSE)
glm.nb(formula, data, weights, subset, na.action, start = NULL, etastart, mustart, control = glm.control(...), method = "glm.fit", model = TRUE, x = FALSE, y = TRUE, contrasts = NULL, ..., init.theta, link = log)
glmmPQL(fixed, random, family, data, correlation, weights, control, niter = 10, verbose = TRUE, ...)
glob2rx(pattern, trim.head = FALSE, trim.tail = TRUE)
gls(model, data, correlation, weights, subset, method, na.action, control, verbose)
glsControl(maxIter, msMaxIter, tolerance, msTol, msScale, msVerbose, singular.ok, qrTol, returnObject, apVar, .relStep, nlmStepMax, optimMethod, minAbsParApVar, natural)
glsStruct(corStruct, varStruct)
gnls(model, data, params, start, correlation, weights, subset, na.action, naPattern, control, verbose)
gnlsControl(maxIter, nlsMaxIter, msMaxIter, minScale, tolerance, nlsTol, msTol, msScale, returnObject, msVerbose, apVar, .relStep, nlmStepMax, optimMethod, minAbsParApVar)
gnlsStruct(corStruct, varStruct)
gpar(...)
graphics.off()
gray(level)
gray.colors(n, start = 0.3, end = 0.9, gamma = 2.2)
gregexpr(pattern, text, extended = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
grep(pattern, x, ignore.case = FALSE, extended = TRUE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE)
grey(level)
grey.colors(n, start = 0.3, end = 0.9, gamma = 2.2)
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted", lwd = NULL, equilogs = TRUE)
grid.add(gPath, child, strict = FALSE, grep = FALSE, global = FALSE, allDevices = FALSE, redraw = TRUE) 
grid.arrows(x = c(0.25, 0.75), y = 0.5, default.units = "npc", grob = NULL, angle = 30, length = unit(0.25, "inches"), ends = "last", type = "open", name = NULL, gp = gpar(), draw = TRUE, vp = NULL)
grid.circle(x=0.5, y=0.5, r=0.5, default.units="npc", name=NULL, gp=gpar(), draw=TRUE, vp=NULL)
grid.collection(..., gp=gpar(), draw=TRUE, vp=NULL)
grid.convert(x, unitTo, axisFrom = "x", typeFrom = "location", axisTo = axisFrom, typeTo = typeFrom, valueOnly = FALSE)
grid.convertHeight(x, unitTo, valueOnly = FALSE) 
grid.convertWidth(x, unitTo, valueOnly = FALSE) 
grid.convertX(x, unitTo, valueOnly = FALSE) 
grid.convertY(x, unitTo, valueOnly = FALSE) 
grid.copy(grob)
grid.display.list(on=TRUE)
grid.draw(x, recording=TRUE)
grid.edit(gPath, ..., strict = FALSE, grep = FALSE, global = FALSE, allDevices = FALSE, redraw = TRUE) 
grid.frame(layout=NULL, name=NULL, gp=gpar(), vp=NULL, draw=TRUE)
grid.get(gPath, strict = FALSE, grep = FALSE, global = FALSE, allDevices = FALSE)
grid.grab(warn = 2, wrap = FALSE, ...)
grid.grabExpr(expr, warn = 2, wrap = FALSE, ...)
grid.grill(h = unit(seq(0.25, 0.75, 0.25), "npc"), v = unit(seq(0.25, 0.75, 0.25), "npc"), default.units = "npc", gp=gpar(col = "grey"), vp = NULL)
grid.grob(list.struct, cl = NULL, draw = TRUE)
grid.layout(nrow = 1, ncol = 1, widths = unit(rep(1, ncol), "null"), heights = unit(rep(1, nrow), "null"), default.units = "null", respect = FALSE, just="centre")
grid.line.to(x = 1, y = 1, default.units = "npc", name = NULL, gp = gpar(), draw = TRUE, vp = NULL)
grid.lines(x = unit(c(0, 1), "npc", units.per.obs), y = unit(c(0, 1), "npc", units.per.obs),  default.units = "npc", units.per.obs = FALSE, name = NULL, gp=gpar(), draw = TRUE, vp = NULL)
grid.locator(unit = "native")
grid.move.to(x = 0, y = 0, default.units = "npc", name = NULL, draw = TRUE, vp = NULL)
grid.newpage(recording = TRUE)
grid.pack(gPath, grob, redraw = TRUE, side = NULL, row = NULL, row.before = NULL, row.after = NULL, col = NULL, col.before = NULL, col.after = NULL, width = NULL, height = NULL, force.width = FALSE, force.height = FALSE, border = NULL, dynamic = FALSE)
grid.place(gPath, grob, row = 1, col = 1, redraw = TRUE)
grid.plot.and.legend()
grid.points(x = runif(10), y = runif(10), pch = 1, size = unit(1, "char"), default.units = "native", name = NULL, gp=gpar(), draw = TRUE, vp = NULL)
grid.polygon(x=c(0, 0.5, 1, 0.5), y=c(0.5, 1, 0.5, 0), id=NULL, id.lengths=NULL, default.units="npc", name=NULL, gp=gpar(), draw=TRUE, vp=NULL)
grid.pretty(range)
grid.prompt(ask)
grid.record(expr, list, name=NULL, gp=NULL, vp=NULL)
grid.rect(x = unit(0.5, "npc"), y = unit(0.5, "npc"), width = unit(1, "npc"), height = unit(1, "npc"), just = "centre", hjust = NULL, vjust = NULL, default.units = "npc", name = NULL, gp=gpar(), draw = TRUE, vp = NULL)
grid.refresh()
grid.remove(gPath, warn = TRUE, strict  =  FALSE, grep = FALSE, global = FALSE, allDevices = FALSE, redraw = TRUE)
grid.segments(x0 = unit(0, "npc"), y0 = unit(0, "npc"), x1 = unit(1, "npc"), y1 = unit(1, "npc"), default.units = "npc", units.per.obs = FALSE, name = NULL, gp = gpar(), draw = TRUE, vp = NULL)
grid.set(gPath, newGrob, strict = FALSE, grep = FALSE, redraw = TRUE) 
grid.show.layout(l, newpage=TRUE, bg = "light grey", cell.border = "blue", cell.fill = "light blue", cell.label = TRUE, label.col = "blue", unit.col = "red", vp = NULL) 
grid.show.viewport(v, parent.layout = NULL, newpage = TRUE, border.fill="light grey", vp.col="blue", vp.fill="light blue", scale.col="red", vp = NULL)
grid.text(label, x = unit(0.5, "npc"), y = unit(0.5, "npc"),  just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, default.units = "npc", name = NULL, gp = gpar(), draw = TRUE, vp = NULL)
grid.xaxis(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = NULL, gp = gpar(), draw = TRUE, vp = NULL)
grid.yaxis(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = NULL, gp = gpar(), draw = TRUE, vp = NULL)
grob(..., name = NULL, gp = NULL, vp = NULL, cl = NULL) 
grobHeight(x)
grobWidth(x)
groupedData(formula, data, order.groups, FUN, outer, inner, labels, units)
gsub(pattern, replacement, x, ignore.case = FALSE, extended = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
gsummary(object, FUN, omitGroupingFactor, form, level, groups, invariantsOnly, ...)
gzcon(con, level = 6, allowNonCompressed = TRUE)
gzfile(description, open = "", encoding = getOption("encoding"), compression = 6)
hasArg(name)
hasMethod(f, signature=character(), where)
hasTsp(x)
hat(x, intercept = TRUE)
hatvalues(model, ...)
hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)
hcl(h = 0, c = 35, l = 85, alpha, fixup = TRUE)
hclust(d, method = "complete", members=NULL)
head(x, ...)
head(x, n = 6, ...)
heat.colors(n)
heatmap(x, Rowv=NULL, Colv=if(symm)"Rowv" else NULL, distfun = dist, hclustfun = hclust, reorderfun = function(d,w) reorder(d,w), add.expr, symm = FALSE, revC = identical(Colv, "Rowv"), scale=c("row", "column", "none"), na.rm = TRUE, margins = c(5, 5), ColSideColors, RowSideColors, cexRow = 0.2 + 1/log10(nr), cexCol = 0.2 + 1/log10(nc), labRow = NULL, labCol = NULL, main = NULL, xlab = NULL, ylab = NULL, keep.dendro = FALSE, verbose = getOption("verbose"), ...)
heightDetails(x)
help(topic, offline = FALSE, package = NULL, lib.loc = NULL, verbose = getOption("verbose"), try.all.packages = getOption("help.try.all.packages"), chmhelp = getOption("chmhelp"), htmlhelp = getOption("htmlhelp"), pager = getOption("pager")) ?topic type?topic
help.search(pattern, fields = c("alias", "concept", "title"), apropos, keyword, whatis, ignore.case = TRUE, package = NULL, lib.loc = NULL, help.db = getOption("help.db"), verbose = getOption("verbose"), rebuild = FALSE, agrep = NULL)
help.start(gui = "irrelevant", browser = getOption("browser"), remote = NULL)
hist(x, ...)
hist(x, breaks = "Sturges", freq = NULL, probability = !freq, include.lowest = TRUE, right = TRUE, density = NULL, angle = 45, col = NULL, border = NULL, main = paste("Histogram of" , xname), xlim = range(breaks), ylim = NULL, xlab = xname, ylab, axes = TRUE, plot = TRUE, labels = FALSE, nclass = NULL, ...)
hist(x, breaks, ..., xlab = deparse(substitute(x)), plot = TRUE, freq = FALSE, start.on.monday = TRUE, format)
hist.FD(x, prob = TRUE, xlab = deparse(substitute(x)), ...)
histogram(x, ...)
histogram(x, data = parent.frame(), allow.multiple, outer = TRUE, auto.key = FALSE, aspect = "fill", panel = "panel.histogram", prepanel, scales, strip, groups, xlab, xlim, ylab, ylim, type = c("percent", "count", "density"), nint = if (is.factor(x)) length(levels(x)) else round(log2(length(x)) + 1), endpoints = extend.limits(range(x, finite = TRUE), prop = 0.04), breaks = if (is.factor(x)) seq(0.5, length = length(levels(x))+1) else do.breaks(endpoints, nint), equal.widths = TRUE, drop.unused.levels = lattice.getOption("drop.unused.levels"), ..., default.scales = list(), subscripts, subset)
histogram(x, data, xlab, ...)
history(max.show = 25, reverse = FALSE)
httpclient(url, port=80, error.is.fatal=TRUE, check.MIME.type=TRUE, file=tempfile(), drop.ctrl.z=TRUE)
hubers(y, k = 1.5, mu, s, initmu = median(y), tol = 1e-06)
iconv(x, from, to, sub=NA)
iconvlist()
identical(x, y)
identify(x, ...)
identify(x, FUN = NULL, N = 20, MAXCLUSTER = 20, DEV.FUN = NULL, ...)
identify(x, y = NULL, labels = seq(along = x), pos = FALSE, n = length(x), plot = TRUE, atpen = FALSE, offset = 0.5, tolerance = 0.25, ...)
if(cond) cons.expr  else  alt.expr
if(cond) expr
ifelse(test, yes, no)
image(x, ...)
image(x, y, z, zlim, xlim, ylim, col = heat.colors(12), add = FALSE, xaxs = "i", yaxs = "i", xlab, ylab, breaks, oldstyle = FALSE, ...)
imp.moments(boot.out=NULL, index=1, t=boot.out$t[, index],  w=NULL, def=TRUE, q=NULL)
imp.prob(boot.out=NULL, index=1, t0=boot.out$t0[index],  t=boot.out$t[, index], w=NULL, def=TRUE, q=NULL)
imp.quantile(boot.out=NULL, alpha=NULL, index=1,  t=boot.out$t[, index], w=NULL, def=TRUE, q=NULL)
imp.weights(boot.out, def=TRUE, q=NULL)
importIntoEnv(impenv, impnames, expenv, expnames)
index.search(topic, path, file="AnIndex", type = "help")
influence(model, ...)
influence(model, do.coef = TRUE, ...)
influence.gam(model,...)
influence.measures(model)
inheritedSubMethodLists(object, thisClass, mlist, ev)
inherits(x, what, which = FALSE)
initMethodDispatch()
initial.sp(X,S,off,expensive=FALSE)
initialize(.Object, ...)
insertMethod(mlist, signature, args, def, cacheOnly)
install.binaries(pkgs, lib, CRAN = getOption("CRAN"), contriburl = contrib.url(CRAN, type = "mac.binary"), method, available = NULL, destdir = NULL, installWithVers = FALSE)
install.from.file(pkg = file.choose(), binary=FALSE)
install.packages(pkgs, lib, repos = getOption("repos"), contriburl = contrib.url(repos, type), method, available = NULL, destdir = NULL, installWithVers = FALSE, dependencies = FALSE, type = getOption("pkgType"))
installFoundDepends(depPkgList, ...)
installed.packages(lib.loc = NULL, priority = NULL, noCache = FALSE)
intToBits(x)
intToUtf8(x, multiple = FALSE)
integer(length = 0)
integrate(f, lower, upper, subdivisions=100, rel.tol = .Machine$double.eps^0.25, abs.tol = rel.tol, stop.on.error = TRUE, keep.xy = FALSE, aux = NULL, ...)
interaction(..., drop = FALSE, sep = ".")
interaction.plot(x.factor, trace.factor, response, fun = mean, type = c("l", "p", "b"), legend = TRUE, trace.label = deparse(substitute(trace.factor)), fixed = FALSE, xlab = deparse(substitute(x.factor)), ylab = ylabel, ylim = range(cells, na.rm=TRUE), lty = nc:1, col = 1, pch = c(1:9, 0, letters), xpd = NULL, leg.bg = par("bg"), leg.bty = "n", xtick = FALSE, xaxt = par("xaxt"), axes = TRUE, ...)
interactive()
interpSpline(obj1, obj2, bSpline = FALSE, period = NULL, na.action = na.fail)
intersect(x, y)
intervals(object, level, ...)
intervals(object, level, pool, ...)
intervals(object, level, which, ...)
inv.logit(x) stinf=TRUE, alpha=NULL, main="", ylab=NULL, ...)
inverse.gaussian(link = "1/mu^2")
inverse.rle(x, ...)
invokeRestart(r, ...)
invokeRestartInteractively(r)
is(object, class2)
is.R()
is.Surv(x)
is.array(x)
is.atomic(x)
is.call(x)
is.category(x)
is.character(x)
is.complex(x)
is.data.frame(x)
is.date(x)
is.double(x)
is.element(el, set)
is.empty.model(x)
is.environment(obj)
is.expression(x)
is.factor(x)
is.finite(x)
is.function(x)
is.infinite(x)
is.integer(x)
is.language(x)
is.leaf(object)
is.list(x)
is.loaded(symbol, PACKAGE = "")
is.logical(x)
is.matrix(x)
is.na(x)
is.na.coxph.penalty(x)
is.na.ratetable2(x)
is.name(y)
is.nan(x)
is.null(x)
is.numeric(x)
is.object(x)
is.ordered(x)
is.pairlist(x)
is.primitive(x)
is.qr(x)
is.ratetable(x, verbose=FALSE)
is.real(x)
is.recursive(x)
is.shingle(x)
is.stepfun(x)
is.symbol(y)
is.table(x)
is.tclObj(x)
is.tkwin(x)
is.ts(x)
is.tskernel(k)
is.unsorted(x, na.rm = FALSE)
is.vector(x, mode = "any")
isBalanced(object, countOnly, level)
isBaseNamespace(ns)
isClass(Class, formal=TRUE, where)
isClassDef(object)
isClassUnion(Class)
isGeneric(f, where, fdef, getName = FALSE)
isGrammarSymbol(symbol)
isGroup(f, where, fdef)
isIncomplete(con)
isInitialized(object)
isOpen(con, rw = "")
isRestart(x)
isSealedClass(Class, where) "(" "<-" "{"
isSealedMethod(f, signature, fdef, where)
isSeekable(con)
isTRUE(x) T; F
isVirtualClass(Class, where)
isoMDS(d, y = cmdscale(d, k), k = 2, maxit = 50, trace = TRUE, tol = 1e-3, p = 2)
isoreg(x, y = NULL)
jitter(x, factor=1, amount = NULL)
jpeg(filename = "Rplot%03d.jpeg", width = 480, height = 480, pointsize = 12, quality = 75, bg = "white", res = NA, ...)
julian(x, ...)
julian(x, origin = as.Date("1970-01-01"), ...)
julian(x, origin = as.POSIXct("1970-01-01", tz="GMT"), ...)
k3.linear(L, strata=NULL)
kappa(z, ...)
kappa(z, ...) 
kappa(z, exact = FALSE, ...)
kappa.tri(z, exact = FALSE, ...)
kde2d(x, y, h, n = 25, lims = c(range(x), range(y)))
kernapply(k1, k2)
kernapply(x, k, circular = FALSE, ...) 
kernel(coef, m, r, name)
kmeans(x, centers, iter.max = 10, nstart = 1, algorithm = c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen"))
knn(train, test, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)
knn.cv(train, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)
knn1(train, test, cl)
knots(Fn, ...)
kronecker(X, Y, FUN = "*", make.dimnames = FALSE, ...)
kruskal.test(formula, data, subset, na.action, ...)
kruskal.test(x, ...)
kruskal.test(x, g, ...)
ks.test(x, y, ..., alternative = c("two.sided", "less", "greater"), exact = NULL)
ksmooth(x, y, kernel = c("box", "normal"), bandwidth = 0.5, range.x = range(x), n.points = max(100, length(x)), x.points)
l10n_info()
labels(object, ...)
labels(object, digits=4, minlength=1, pretty, collapse=TRUE, ...)
lag(x, ...)
lag(x, k = 1, ...)
lag.plot(x, lags = 1, layout = NULL, set.lags = 1:lags, main = NULL, asp = 1, font.main=par("font.main"), cex.main=par("cex.main"), diag = TRUE, diag.col = "gray", type = "p", oma = NULL, ask = NULL, do.lines = (n <= 150), labels = do.lines, ...)
languageEl(object, which)
lapply(X, FUN, ...)
larrows(x0 = NULL, y0 = NULL, x1, y1, x2 = NULL, y2 = NULL, angle = 30, code = 2, length = 0.25, unit = "inches", col, alpha, lty, lwd, fill = NULL, ...)
lattice.getOption(name)
lattice.options(...)
latticeParseFormula(model, data, dimension = 2, subset = TRUE, groups = NULL, multiple, outer, subscripts, drop)
layout(mat, widths = rep(1, ncol(mat)), heights = rep(1, nrow(mat)), respect = FALSE)
layout.show(n = 1)
lbeta(a, b)
lchoose(n, k)
lcm(x)
lda(formula, data, ..., subset, na.action)
lda(x, ...)
lda(x, grouping, ..., subset, na.action)
lda(x, grouping, prior = proportions, tol = 1.0e-4, method, CV = FALSE, nu, ...)
ldahist(data, g, nbins = 25, h, x0 = - h/1000, breaks, xlim = range(breaks), ymax = 0, width, type = c("histogram", "density", "both"), sep = (type != "density"), col = 5, xlab = deparse(substitute(data)), bty = "n", ...) method = "qr", model = FALSE, x = FALSE, y = FALSE, contrasts = NULL, ...)
legend(x, y = NULL, legend, fill = NULL, col = "black", lty, lwd, pch, angle = 45, density = NULL, bty = "o", bg = par("bg"), pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd, xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1, adj = c(0, 0.5), text.width = NULL, text.col = par("col"), merge = do.lines && has.pch, trace = FALSE, plot = TRUE, ncol = 1, horiz = FALSE, title = NULL, inset = 0)
length(x)
levelplot(x, ...)
levelplot(x, data, aspect = "iso", ...)
levelplot(x, data, panel = "panel.levelplot", at, contour = FALSE, cuts = 15, pretty = FALSE, region = TRUE, ..., col.regions = trellis.par.get("regions")$col, colorkey = region)
levels(x)
lfactorial(x)
lgamma(x)
library(package, help, pos = 2, lib.loc = NULL, character.only = FALSE, logical.return = FALSE, warn.conflicts = TRUE, keep.source = getOption("keep.source.pkgs"), verbose = getOption("verbose"), version)
library.dynam.unload(chname, libpath, verbose = getOption("verbose"), file.ext = .Platform$dynlib.ext)
licence()
license()
lik.CI(like, lim)
line(x, y)
lineToGrob(x = 1, y = 1, default.units = "npc", name = NULL, gp = gpar(), vp = NULL)
linear.approx(boot.out, L=NULL, index=1, type=NULL, t0=NULL,  t=NULL, ...)
linearizeMlist(mlist, inherited = TRUE)
lines(formula, data = parent.frame(), ..., subset)
lines(x, ...)
lines(x, dens = TRUE, h = function(u) u, J = function(u) 1,  npts = 50, lty = 1, ...)
lines(x, type="s", mark=3, col=1, lty=1, lwd=1, mark.time=TRUE , xscale=1,  firstx=0, firsty=1, xmax, fun, conf.int=FALSE,  ...)
lines(x, y = NULL, type = "l", col = par("col"), lty = par("lty"), ...)
linesGrob(x = unit(c(0, 1), "npc", units.per.obs), y = unit(c(0, 1), "npc", units.per.obs),  default.units = "npc", units.per.obs = FALSE, name = NULL, gp=gpar(), vp = NULL)
list(...)
list.files(path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE)
listFromMlist(mlist, prefix = list())
list_files_with_exts(dir, exts, all.files = FALSE, full.names = TRUE)
list_files_with_type(dir, type, all.files = FALSE, full.names = TRUE)
llines(x, y = NULL, type = "l", col, alpha, lty, lwd, ...)
lm(formula, data, subset, weights, na.action, method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, contrasts = NULL, offset, ...) singular.ok = TRUE, ...)
lm.fit.null(x, y, method = "qr", tol = 1e-07, ...)
lm.influence(model, do.coef = TRUE)
lm.ridge(formula, data, subset, na.action, lambda = 0, model = FALSE, x = FALSE, y = FALSE, contrasts = NULL, ...)
lm.wfit(x, y, w, offset = NULL, method = "qr", tol = 1e-7, singular.ok = TRUE, ...)
lm.wfit.null(x, y, w, method = "qr", tol = 1e-07, ...)
lmList(object, data, level, subset, na.action, pool)
lme(fixed, data, random, correlation, weights,  subset, method, na.action, control, contrasts)
lme(fixed, data, random, correlation, weights, subset, method, na.action, control, contrasts = NULL)
lme(fixed, data, random, correlation, weights, subset, method, na.action, control, contrasts)
lmeControl(maxIter, msMaxIter, tolerance, niterEM, msTol, msScale, msVerbose, returnObject, gradHess, apVar, .relStep, minAbsParApVar, nlmStepMax, optimMethod, natural)
lmeScale(start)
lmeStruct(reStruct, corStruct, varStruct)
lmsreg(...)
load(file, envir = parent.frame())
loadMethod(method, fname, envir)
loadNamespace(package, lib.loc = NULL, keep.source = getOption("keep.source.pkgs"), partial = FALSE, declarativeOnly = FALSE)
loadURL(url, envir = parent.frame(), quiet = TRUE, ...)
loadedNamespaces()
loadhistory(file = ".Rhistory")
loadingNamespaceInfo()
loadings(x)
local(expr, envir = new.env())
localeToCharset(locale = Sys.getlocale("LC_CTYPE"))
locator(n = 512, type = "n", ...)
lockBinding(sym, env)
lockEnvironment(env, bindings = FALSE)
locpoly(x, y, drv = 0, degree =, kernel = "normal",  bandwidth, gridsize = 401, bwdisc = 25,  range.x, binned = FALSE, truncate = TRUE)
loess(formula, data, weights, subset, na.action, model = FALSE, span = 0.75, enp.target, degree = 2, parametric = FALSE, drop.square = FALSE, normalize = TRUE, family = c("gaussian", "symmetric"), method = c("loess", "model.frame"), control = loess.control(...), ...)
loess.control(surface = c("interpolate", "direct"), statistics = c("approximate", "exact"), trace.hat = c("exact", "approximate"), cell = 0.2, iterations = 4, ...)
loess.smooth(x, y, span = 2/3, degree = 1, family = c("symmetric", "gaussian"), evaluation = 50, ...)
log(x, base = exp(1))
log10(x)
log1p(x)
log2(x)
logDet(object, ...)
logDet(object, covariate, ...)
logLik(object, ...)
logLik(object, Pars, conLin, ...)
logLik(object, REML = FALSE, ...)
logLik(object, REML, ...)
logLik(object, REML, pool, ...)
logLik(object, conLin, ...)
logLik(object, data, ...)
logLik.gam(object,...)
logb(x, base = exp(1))
logical(length = 0)
logit(p)
loglin(table, margin, start = rep(1, length(table)), fit = FALSE, eps = 0.1, iter = 20, param = FALSE, print = TRUE)
loglm(formula, data, subset, na.action, ...)
loglm1(formula, data, ...)
loglm1(formula, data, start = rep(1, length(data)), fitted = FALSE, keep.frequencies = fitted, param = TRUE, eps = 1/10, iter = 40, print = FALSE, ...)
logtrans(object, ...)
logtrans(object, ..., alpha = seq(0.5, 6, by = 0.25) - min(y), plotit = TRUE, interp =, xlab = "alpha", ylab = "log Likelihood")
logtrans(object, data, ...)
lookup.xport(file)
lower.to.upper.tri.inds(n)
lower.tri(x, diag = FALSE)
lowess(x, y = NULL, f = 2/3, iter = 3, delta = 0.01 * diff(range(xy$x[o])))
lplot.xy(xy, type, pch, lty, col, cex, lwd, font, fontfamily, fontface, col.line, alpha, fill, ...)
lpoints(x, y = NULL, type = "p", col, pch, alpha, fill, font, fontfamily, fontface, cex, ...)  
lqs(formula, data, ..., method = c("lts", "lqs", "lms", "S", "model.frame"), subset, na.action, model = TRUE, x.ret = FALSE, y.ret = FALSE, contrasts = NULL)
lqs(x, ...)
lqs(x, y, intercept = TRUE, method = c("lts", "lqs", "lms", "S"), quantile, control = lqs.control(...), k0 = 1.548, seed, ...)
lrect(xleft, ybottom, xright, ytop, x = (xleft + xright) / 2, y = (ybottom + ytop) / 2, width = xright - xleft, height = ytop - ybottom, col = "transparent", border = "black", lty = 1, lwd = 1, alpha = 1, just = "center", hjust = NULL, vjust = NULL, ...)
ls(name, pos = -1, envir = as.environment(pos), all.names = FALSE, pattern)
ls.diag(ls.out)
ls.print(ls.out, digits = 4, print.it = TRUE)
ls.str(pos = 1, pattern, ...,  envir = as.environment(pos), mode = "any")
lsegments(x0, y0, x1, y1, x2, y2, col, alpha, lty, lwd, ...)
lset(theme = col.whitebg())
lsf.str(pos = 1, ..., envir = as.environment(pos))
lsfit(x, y, wt = NULL, intercept = TRUE, tolerance = 1e-07, yname = NULL)
ltext(x, y = NULL, labels = seq(along = x), col, alpha, cex, srt = 0, font, fontfamily, fontface, adj = c(0.5, 0.5), pos = NULL, offset = 0.5, ...)  
ltransform3dMatrix(screen, R.mat)
ltransform3dto3d(x, R.mat, dist)
ltsreg(...)
lvq1(x, cl, codebk, niter = 100 * nrow(codebk$x), alpha = 0.03)
lvq2(x, cl, codebk, niter = 100 * nrow(codebk$x), alpha = 0.03, win = 0.3)
lvq3(x, cl, codebk, niter = 100*nrow(codebk$x), alpha = 0.03, win = 0.3, epsilon = 0.1)
lvqinit(x, cl, size, prior, k = 5)
lvqtest(codebk, test)
machine()
mad(x, center = median(x), constant = 1.4826, na.rm = FALSE, low = FALSE, high = FALSE)
magic(y,X,sp,S,off,rank=NULL,H=NULL,C=NULL,w=NULL, gamma=1,scale=1,gcv=TRUE,ridge.parameter=NULL, control=list(maxit=50,tol=1e-6,step.half=25, rank.tol=.Machine$double.eps^0.5))
magic.post.proc(X,object,w)
mahalanobis(x, center, cov, inverted=FALSE, ...)
make.groups(...)
make.link(link)
make.names(names, unique = FALSE, allow_ = TRUE)
make.packages.html(lib.loc = .libPaths())
make.rgb(red, green, blue, name = NULL, white = "D65", gamma = 2.2)
make.socket(host = "localhost", port, fail = TRUE, server = FALSE)
make.unique(names, sep = ".")
makeARIMA(phi, theta, Delta, kappa = 1e6)
makeActiveBinding(sym, fun, env)
makeClassRepresentation(name, slots=list(), superClasses=character(), prototype=NULL, package, validity, access, version, sealed, virtual=NA, where)
makeExtends(Class, to, coerce, test, replace, by, package, slots, classDef1, classDef2)
makeGeneric(f, fdef, fdefault, group=list(), valueClass=character(), package, signature = NULL, genericFunction = NULL)
makeLazyLoading(package, lib.loc = NULL, compress = TRUE, keep.source = getOption("keep.source.pkgs"))
makeMethodsList(object, level=1)
makePrototypeFromClassDef(slots, ClassDef, extends, where)
makeStandardGeneric(f, fdef)
makepredictcall(var, call)
manglePackageName(pkgName, pkgVersion)
manova(...)
mantelhaen.test(x, y = NULL, z = NULL, alternative = c("two.sided", "less", "greater"), correct = TRUE, exact = FALSE, conf.level = 0.95)
mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)
margin.table(x, margin=NULL)
mat.or.vec(nr, nc)
match(x, table, nomatch = NA, incomparables = FALSE)
match.arg(arg, choices, several.ok = FALSE)
match.call(definition = NULL, call = sys.call(sys.parent()), expand.dots = TRUE)
match.fun(FUN, descend = TRUE)
match.ratetable(R, ratetable)
matchSignature(signature, fun, where)
matplot(x, y, type = "p", lty = 1:5, lwd = 1, pch = NULL, col = 1:6, cex = NULL, xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL, ..., add = FALSE, verbose = getOption("verbose"))
matpoints(x, y, type = "p", lty = 1:5, lwd = 1, pch = NULL, col = 1:6, ...) col = 1:6, ...)
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
mauchley.test(object, Sigma = diag(nrow = p), T = Thin.row(proj(M) - proj(X)), M = diag(nrow = p), X = ~0, idata = data.frame(index = seq(length = p)), ...)
mauchly.test(object, Sigma = diag(nrow = p), T = Thin.row(proj(M) - proj(X)), M = diag(nrow = p), X = ~0, idata = data.frame(index = seq(length = p)), ...)
max(..., na.rm=FALSE)
max.col(m, ties.method=c("random", "first", "last"))
mca(df, nf = 2, abbrev = FALSE)
mcnemar.test(x, y = NULL, correct = TRUE)
md5sum(files)
mdy.date(month, day, year, nineteen = TRUE, fillday = FALSE, fillmonth = FALSE)
mean(x, ...)
mean(x, trim = 0, na.rm = FALSE, ...)
meanabsdev(y)
meanvar(tree, ...)
meanvar(tree, xlab="ave(y)", ylab="ave(deviance)", ...)
median(x, na.rm = FALSE)
medpolish(x, eps = 0.01, maxiter = 10, trace.iter = TRUE, na.rm = FALSE)
mem.limits(nsize = NA, vsize = NA)
memory.profile()
menu(choices, graphics = FALSE, title = "")
merge(x, y, ...)
merge(x, y, by = intersect(names(x), names(y)), by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all, sort = TRUE, suffixes = c(".x",".y"), ...)
mergeMethods(m1, m2, genericLabel)
message(..., domain = NULL)
metaNameUndo(strings, prefix = "M", searchForm = FALSE)
methods(generic.function, class)
methodsPackageMetaName(prefix, name)
mgcv(y,X,sp,S,off,C=NULL,w=rep(1,length(y)),H=NULL, scale=1,gcv=TRUE,control=mgcv.control())
mgcv.control(conv.tol=1e-7,max.half=20,target.edf=NULL,min.edf=-1)
mget(x, envir, mode = "any", ifnotfound = list(function(x) stop(paste("value for '", x, "' not found", sep = ""), call. = FALSE)), inherits = FALSE)
min(..., na.rm=FALSE)
mirror2html(mirrors = NULL, file = "mirrors.html", head = "mirrors-head.html", foot = "mirrors-foot.html")
missing(x)
missingArg(symbol, envir = parent.frame(), eval)
mle(minuslogl, start = formals(minuslogl), method = "BFGS", fixed = list(), ...)
mode(x)
model.extract(frame, component)
model.frame(formula, ...)
model.frame(formula, data = NULL, ...)
model.frame(formula, data = NULL, subset = NULL, na.action = na.fail, drop.unused.levels = FALSE, xlev = NULL, ...)
model.matrix(object, ...)
model.matrix(object, data = environment(object), contrasts.arg = NULL, xlev = NULL, ...)
model.matrix(object, data, contrast, ...)
model.newframe(object, newdata, safe = FALSE, response = FALSE, ...)
model.offset(x)
model.response(data, type = "any")
model.tables(x, ...)
model.tables(x, type = "effects", se = FALSE, ...)
model.tables(x, type = "effects", se = FALSE, cterms, ...)
model.weights(x)
mona(x)
mono.con(x,up=TRUE,lower=NA,upper=NA)
monthplot(x, ...)
monthplot(x, labels = 1:12, ylab = deparse(substitute(x)), times = 1:length(x), phase = (times - 1)%%length(labels) + 1, base = mean, axes = TRUE, type = c("l", "h"), box = TRUE, add = FALSE, ...)
monthplot(x, labels = NULL, times = time(x), phase = cycle(x), ylab = deparse(substitute(x)), ...)
monthplot(x, labels = NULL, ylab = choice, choice = "sea", ...)
monthplot(x, labels = NULL, ylab = choice, choice = "seasonal", ...)
months(x, abbreviate = FALSE)
months(x, abbreviate)
mood.test(formula, data, subset, na.action, ...)
mood.test(x, ...)
mood.test(x, y, alternative = c("two.sided", "less", "greater"), ...)
mosaicplot(formula, data = NULL, ..., main = deparse(substitute(data)), subset, na.action = stats::na.omit)
mosaicplot(x, ...)
mosaicplot(x, main = deparse(substitute(x)),  sub = NULL, xlab = NULL, ylab = NULL, sort = NULL, off = NULL, dir = NULL, color = NULL, shade = FALSE, margin = NULL, cex.axis = 0.66, las = par("las"), type = c("pearson", "deviance", "FT"), ...)
moveToGrob(x = 0, y = 0, default.units = "npc", name = NULL, vp = NULL)
mroot(A,rank=NULL,method="chol")
mtext(text, side = 3, line = 0, outer = FALSE, at = NA, adj = NA, padj = NA, cex = NA, col = NA, font = NA, vfont = NULL, ...)
multiedit(x, class, k = 1, V = 3, I = 5, trace = TRUE)
multinom(formula, data, weights, subset, na.action, contrasts = NULL, Hess = FALSE, summ = 0, censored = FALSE, model = FALSE, ...)
mvfft(z, inverse = FALSE)
n2mfrow(nr.plots)
na.action(object, ...)
na.contiguous(object, ...)
na.exclude(object, ...)
na.fail(object, ...)
na.omit(object, ...)
na.pass(object, ...)
na.rpart(x)
names(x)
namespaceExport(ns, vars)
namespaceImport(self, ...)
namespaceImportClasses(self, ns, vars)
namespaceImportFrom(self, ns, vars)
namespaceImportMethods(self, ns, vars)
napredict(omit, x, ...)
naprint(x, ...)
naresid(omit, x, ...)
nchar(x, type = c("bytes", "chars", "width"))
nclass.FD(x)
nclass.Sturges(x)
nclass.freq(x)
nclass.scott(x)
ncol(x)
needUpdate(object)
neg.bin(theta = stop("'theta' must be given"))
negative.binomial(theta = stop("'theta' must be specified"), link = "log")
negexp.SSival(mCall, data, LHS)
new(Class, ...)
new.env(hash = FALSE, parent = parent.frame())
new.packages(lib.loc = NULL, repos = getOption("repos"), contriburl = contrib.url(repos), method, available = NULL, ask = FALSE)
newBasic(Class, ...)
newEmptyObject()
nextn(n, factors = c(2,3,5))
ngettext(n, msg1, msg2, domain = NULL)
nlevels(x)
nlm(f, p, hessian = FALSE, typsize=rep(1, length(p)), fscale=1, print.level = 0, ndigit=12, gradtol = 1e-6, stepmax = max(1000 * sqrt(sum((p/typsize)^2)), 1000), steptol = 1e-6, iterlim = 100, check.analyticals = TRUE, ...)
nlme(model, data, fixed, random, groups, start, correlation, weights, subset, method, na.action, naPattern, control, verbose)
nlmeControl(maxIter, pnlsMaxIter, msMaxIter, minScale, tolerance, niterEM, pnlsTol, msTol, msScale, returnObject, msVerbose, gradHess, apVar, .relStep, nlmStepMax, minAbsParApVar, natural)
nlmeStruct(reStruct, corStruct, varStruct)
nlminb(start, objective, gradient = NULL, hessian = NULL, scale = 1, control = list(), lower = -Inf, upper = Inf, ...)
nls(formula, data, start, control, algorithm, trace, subset, weights, na.action, model, lower, upper, ...)
nls.control(maxiter = 50, tol = 1e-05, minFactor = 1/1024)
nlsList(model, data, start, control, level, subset, na.action, pool)
nlsModel(form, data, start)
nnet(formula, data, weights, ..., subset, na.action, contrasts = NULL)
nnet(x, ...)
nnet(x, y, weights, size, Wts, mask, linout = FALSE, entropy = FALSE, softmax = FALSE, censored = FALSE, skip = FALSE, rang = 0.7, decay = 0, maxit = 100, Hess = FALSE, trace = TRUE, MaxNWts = 1000, abstol = 1.0e-4, reltol = 1.0e-8, ...)
nnetHess(net, x, y, weights)
noquote(obj)
norm.ci(boot.out=NULL, conf=0.95, index=1, var.t0=NULL,  t0=NULL, t=NULL, L=NULL, h=function(t) t,  hdot=function(t) 1, hinv=function(t) t)
normalizePath(path)
notExp(x)
notExp2(x,d=.Options$mgcv.vc.logrange,b=1/d)
notLog(x)
notLog2(x,d=.Options$mgcv.vc.logrange,b=1/d)
nrow(x)
ns(x, df = NULL, knots = NULL, intercept = FALSE, Boundary.knots = range(x))
nsl(hostname)
null.space.dimension(d,m)
numeric(length = 0)
numericDeriv(expr, theta, rho = parent.frame())
object.size(x)
objects(name, pos= -1, envir = as.environment(pos), all.names = FALSE, pattern)
offset(object)
old.packages(lib.loc = NULL, repos = getOption("repos"), contriburl = contrib.url(repos), method, available = NULL, checkBuilt = FALSE)
oldClass(x)
olvq1(x, cl, codebk, niter = 40 * nrow(codebk$x), alpha = 0.3)
on.exit(expr, add = FALSE)
oneway(formula, data, location=mean, spread=function(x) sqrt(var(x)))
oneway.test(formula, data, subset, na.action, var.equal = FALSE)
open(con, ...)
open(con, open = "r", blocking = TRUE, ...)
optim(par, fn, gr = NULL, method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN"), lower = -Inf, upper = Inf, control = list(), hessian = FALSE, ...)
optimise(f = , interval = , lower = min(interval), upper = max(interval), maximum = FALSE, tol = .Machine$double.eps^0.25, ...)
optimize(f = , interval = , lower = min(interval), upper = max(interval), maximum = FALSE, tol = .Machine$double.eps^0.25, ...)
options(...)
order.dendrogram(x)
ordered(x, ...)
outer(X, Y, FUN="*", ...)
p.adjust(p, method = p.adjust.methods, n = length(p))
pacf(x, lag.max = NULL, plot = TRUE, na.action = na.fail, ...)
pacf(x, lag.max, plot, na.action, ...)
packBits(x, type = c("raw", "integer"))
packGrob(frame, grob, side = NULL, row = NULL, row.before = NULL, row.after = NULL, col = NULL, col.before = NULL, col.after = NULL, width = NULL, height = NULL, force.width = FALSE, force.height = FALSE, border = NULL, dynamic = FALSE)
package.contents(pkg, lib.loc = NULL)
package.dependencies(x, check = FALSE, depLevel = c("Depends", "Imports", "Suggests"))
package.description(pkg, lib.loc = NULL, fields = NULL)
package.manager()
package.skeleton(name = "anRpackage", list, environment = .GlobalEnv, path = ".", force = FALSE)
packageDescription(pkg, lib.loc = NULL, fields = NULL, drop = TRUE, encoding = "")
packageEvent(pkgname, event = c("onLoad", "attach", "detach", "onUnload"))
packageHasNamespace(package, package.lib)
packageSlot(object)
packageStatus(lib.loc = NULL, repositories = NULL, method, type = getOption("pkgType"))
package_version(x, strict = TRUE)
page(x, method = c("dput", "print"), ...)
pairlist(...)
pairs(formula, data = NULL, ..., subset, na.action = stats::na.pass)
pairs(x, ...)
pairs(x, form, label, id, idLabels, grid, ...)
pairs(x, labels = colnames(x), panel = panel.lda, dimen, abbrev = FALSE, ..., cex=0.7, type = c("std", "trellis"))
pairs(x, labels, panel = points, ..., lower.panel = panel, upper.panel = panel, diag.panel = NULL, text.panel = textPanel, label.pos = 0.5 + has.diag/3, cex.labels = NULL, font.labels = 1, row1attop = TRUE, gap = 1)
pairs(x, subset, key, ...)
pairwise.prop.test(x, n, p.adjust.method = p.adjust.methods, ...)
pairwise.t.test(x, g, p.adjust.method = p.adjust.methods, pool.sd = TRUE, ...)
pairwise.table(compare.levels, level.names, p.adjust.method)
pairwise.wilcox.test(x, g, p.adjust.method = p.adjust.methods, ...)
palette(value)
pam(x, k, diss = inherits(x, "dist"), metric = "euclidean", medoids = NULL, stand = FALSE, cluster.only = FALSE, keep.diss = !diss && !cluster.only && n < 100, keep.data = !diss && !cluster.only, trace.lev = 0)
panel.3dscatter(x, y, z, rot.mat, distance, groups, type = "p", xlim.scaled, ylim.scaled, zlim.scaled, zero.scaled, col, col.point, col.line, lty, lwd, cex, pch, cross, ..., subscripts)
panel.3dwire(x, y, z, rot.mat = diag(4), distance, shade = FALSE, shade.colors.palette = trellis.par.get("shade.colors")$palette, light.source = c(0, 0, 1000), xlim.scaled, ylim.scaled, zlim.scaled, col = if (shade) "transparent" else "black", lty = 1, lwd = 1, alpha, col.groups = superpose.fill$col, polynum = 100, ..., drape = FALSE, at, col.regions = regions$col, alpha.regions = regions$alpha)
panel.abline(a, b = NULL, h = numeric(0), v = numeric(0), col, col.line, lty, lwd, ...)
panel.arrows(...)
panel.axis(side = c("bottom", "left", "top", "right"), at, labels = TRUE, draw.labels = TRUE, check.overlap = FALSE, outside = FALSE, ticks = TRUE, half = !outside, which.half, tck = as.numeric(ticks), rot = if (is.logical(labels)) 0 else c(90, 0), text.col, text.alpha, text.cex, text.font, text.fontfamily, text.fontface, line.col, line.lty, line.lwd, line.alpha)
panel.barchart(x, y, box.ratio = 1, horizontal = TRUE, origin = NULL, reference = TRUE, stack = FALSE, groups = NULL,  col = if (is.null(groups)) bar.fill$col else superpose.fill$col, border = if (is.null(groups)) bar.fill$border else superpose.fill$border, lty = if (is.null(groups)) bar.fill$lty else superpose.fill$lty,  lwd = if (is.null(groups)) bar.fill$lwd else superpose.fill$lwd, ...)
panel.bwplot(x, y, box.ratio = 1, horizontal = TRUE, pch, col, cex,  font, fontfamily, fontface,  fill, varwidth = FALSE, ..., levels.fos, stats = boxplot.stats, coef = 1.5, do.out = TRUE)
panel.cloud(x, y, subscripts, z, groups = NULL, perspective = TRUE, distance = if (perspective) 0.2 else 0,  xlim, ylim, zlim, panel.3d.cloud = "panel.3dscatter", panel.3d.wireframe = "panel.3dwire", screen = list(z = 40, x = -60), R.mat = diag(4), aspect = c(1, 1), par.box = NULL, xlab, ylab, zlab, xlab.default, ylab.default, zlab.default, scales.3d, proportion = 0.6, wireframe = FALSE, scpos, ..., at)
panel.contourplot(...)
panel.curve(expr, from, to, n = 101, curve.type = "l", col = add.line$col, lty = add.line$lty, lwd = add.line$lwd, type = NULL, ...)
panel.densityplot(x, darg, plot.points = "jitter", ref = FALSE, col, col.line, jitter.amount, ...)
panel.dotplot(x, y, horizontal = TRUE, pch, col, lty, lwd,  col.line, levels.fos, groups = NULL, ...)
panel.fill(col, ...)
panel.grid(h=3, v=3, col, col.line, lty, lwd, ...)
panel.histogram(x, breaks, equal.widths = TRUE, type = "density", nint = round(log2(length(x)) + 1),  alpha, col, border, lty, lwd, ...)
panel.identify(x, y = NULL, labels = seq(along = x), n = length(x), offset = 0.5, threshold = 18, panel.args = trellis.panelArgs(), ...)
panel.levelplot(x, y, z,  subscripts, at = pretty(z), shrink, labels = NULL, label.style = c("mixed", "flat", "align"), contour = FALSE, region = TRUE, col = add.line$col, lty = add.line$lty, lwd = add.line$lwd, cex = add.text$cex, font = add.text$font, fontfamily = add.text$fontfamily, fontface = add.text$fontface, col.text = add.text$col, ..., col.regions = regions$col, alpha.regions = regions$alpha)
panel.linejoin(x, y, fun = mean, horizontal = TRUE, lwd = reference.line$lwd,  lty = reference.line$lty, col, col.line = reference.line$col,  ...)
panel.lines(...)
panel.lmline(x, y, ...)
panel.loess(x, y, span = 2/3, degree = 1, family = c("symmetric", "gaussian"), evaluation = 50, lwd, lty, col, col.line, ...)
panel.mathdensity(dmath = dnorm, args = list(mean=0, sd=1), n = 50, col, col.line, lwd, lty, ...)
panel.pairs(z, panel = "panel.splom", lower.panel = panel, upper.panel = panel, diag.panel = "diag.panel.splom", as.matrix = FALSE, groups = NULL, panel.subscripts, subscripts, pscales = 5, packet.number, panel.number, prepanel.limits = function(x) if (is.factor(x)) levels(x) else
panel.parallel(x, y, z, subscripts, groups = NULL, col, lwd, lty, alpha, common.scale = TRUE, lower, upper, ...)
panel.points(...)
panel.qq(...)
panel.qqmath(x, f.value = NULL, distribution = qnorm, qtype = 7, groups = NULL, ...)
panel.qqmathline(x, y = x, distribution = qnorm, p = c(0.25, 0.75), qtype = 7, groups = NULL,  ...)
panel.rug(x = NULL, y = NULL, regular = TRUE,  start = if (regular) 0 else 0.97, end = if (regular) 0.03 else 1, x.units = rep("npc", 2), y.units = rep("npc", 2), col = add.line$col, lty = add.line$lty, lwd = add.line$lwd, alpha = add.line$alpha, ...)
panel.segments(...)
panel.smooth(x, y, col = par("col"), bg = NA, pch = par("pch"), cex = 1, col.smooth = "red", span = 2/3, iter = 3, ...)
panel.splom(...)
panel.stripplot(x, y, jitter.data = FALSE, factor = 0.5, horizontal = TRUE, groups = NULL, ...)
panel.superpose(x, y = NULL, subscripts, groups, panel.groups = "panel.xyplot", col, col.line, col.symbol, pch, cex, font, fontface, fontfamily, lty, lwd, alpha, type = "p", ...)
panel.superpose.2(x, y = NULL, subscripts, groups, panel.groups = "panel.xyplot", col, col.line, col.symbol, pch, cex, font,  fontface, fontfamily,  lty, lwd, alpha, type = "p", ...)
panel.text(...)
panel.tmd.default(x, y, groups = NULL, ...)
panel.tmd.qqmath(x, f.value = NULL, distribution = qnorm, qtype = 7, groups = NULL,  subscripts, ...)
panel.violin(x, y, box.ratio = 1, horizontal = TRUE, alpha, border, lty, lwd, col, varwidth = FALSE, bw, adjust, kernel, window,  width, n = 50, from, to, cut, na.rm, ...)
panel.wireframe(...)
panel.xyplot(x, y, type="p", pch = plot.symbol$pch, col, col.line = plot.line$col, col.symbol = plot.symbol$col, font = plot.symbol$font, fontfamily = plot.symbol$fontfamily, fontface = plot.symbol$fontface, lty = plot.line$lty, cex = plot.symbol$cex, lwd = plot.line$lwd, horizontal = FALSE, ...)
par(..., no.readonly = FALSE) <highlevel plot> (..., <tag> = <value>)
parallel(x, ...)
parallel(x, data = NULL, ...)
parallel(x, data = parent.frame(), aspect = "fill", between = list(x = 0.5, y = 0.5), panel = "panel.parallel", prepanel, scales, strip, groups, xlab = NULL, xlim, ylab = NULL, ylim, varnames, drop.unused.levels, ..., default.scales, subset = TRUE)
parcoord(x, col = 1, lty = 1, var.label = FALSE, ...)
parent.env(env)
parent.frame() else baseenv())
parent.frame(n = 1)
parse(file = "", n = NULL, text = NULL, prompt = "?")
parse.dcf(text = NULL, file = "", fields = NULL, versionfix = FALSE)
parseNamespaceFile(package, package.lib, mustExist = TRUE)
paste(..., sep = " ", collapse = NULL)
path.expand(path)
path.rpart(tree, nodes, pretty=0, print.it=TRUE)
pbeta(q, shape1, shape2, ncp=0, lower.tail = TRUE, log.p = FALSE)
pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)
pbirthday(n, classes = 365, coincident = 2)
pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)
pchisq(q, df, ncp=0, lower.tail = TRUE, log.p = FALSE)
pcls(M)
pdBlocked(value, form, nam, data, pdClass)
pdCompSymm(value, form, nam, data)
pdConstruct(object, value, form, nam, data, ...)
pdConstruct(object, value, form, nam, data, pdClass, ...)
pdDiag(value, form, nam, data)
pdFactor(object)
pdIdent(value, form, nam, data)
pdIdnot(value = numeric(0), form = NULL,  nam = NULL, data = sys.frame(sys.parent()))
pdLogChol(value, form, nam, data)
pdMat(value, form, nam, data, pdClass)
pdMatrix(object, factor)
pdNatural(value, form, nam, data)
pdSymm(value, form, nam, data)
pdTens(value = numeric(0), form = NULL,  nam = NULL, data = sys.frame(sys.parent()))
pdf(file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"), width = 6, height = 6, onefile = TRUE, family = "Helvetica", title = "R Graphics Output", fonts = NULL, version = "1.1", paper, encoding, bg, fg, pointsize)
pentagamma(x)
periodicSpline(obj1, obj2, knots, period = 2*pi, ord = 4)
person(first = "", last = "", middle = "", email = "")
personList(...)
persp(x = seq(0, 1, len = nrow(z)), y = seq(0, 1, len = ncol(z)), z, xlim = range(x), ylim = range(y), zlim = range(z, na.rm = TRUE), xlab = NULL, ylab = NULL, zlab = NULL, main = NULL, sub = NULL, theta = 0, phi = 15, r = sqrt(3), d = 1, scale = TRUE, expand = 1, col = "white", border = NULL, ltheta = -135, lphi = 0, shade = NA, box = TRUE, axes = TRUE, nticks = 5, ticktype = "simple", ...)
persp(x, ...)
pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)
pf(q, df1, df2, ncp=0, lower.tail = TRUE, log.p = FALSE)
pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)
pgeom(q, prob, lower.tail = TRUE, log.p = FALSE)
phenoModel(Subject, time, dose, lCl, lV)
phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)
pico(name = NULL, file = "")
pictex(file = "Rplots.tex", width = 5, height = 4, debug = FALSE, bg = "white", fg = "black")
pie(x, labels = names(x), edges = 200, radius = 0.8, clockwise = FALSE, init.angle = if(clockwise) 90 else 0, density = NULL, angle = 45, col = NULL, border = NULL, lty = NULL, main = NULL, ...)
piechart(x, labels = names(x), edges = 200, radius = 0.8, density = NULL, angle = 45, col = NULL, main = NULL, ...)
pipe(description, open = "", encoding = getOption("encoding"))
pkgDepends(pkg, recursive = TRUE, local = TRUE, reduce = TRUE, lib.loc = NULL)
pkgVignettes(package, dir, lib.loc = NULL)
placeGrob(frame, grob, row = NULL, col = NULL)
plclust(tree, hang = 0.1, unit = FALSE, level = FALSE, hmin = 0, square = TRUE, labels = NULL, plot. = TRUE, axes = TRUE, frame.plot = FALSE, ann = TRUE, main = "", sub = NULL, xlab = NULL, ylab = "Height")
plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)
plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)
plot(formula, data = parent.frame(), ..., subset, ylab = varnames[response], ask = TRUE)
plot(x, ...)
plot(x, ..., ylab="Fn(x)", verticals = FALSE, col.01line = "gray70")
plot(x, add = FALSE, ci = 0.95, log = c("yes", "dB", "no"), xlab = "frequency", ylab = NULL, type = "l", ci.col = "blue", ci.lty = 3,  main = NULL, sub = NULL, plot.type = c("marginal", "coherency", "phase"), ...)
plot(x, alpha, xlab, ylab, grid, ...)
plot(x, ask = FALSE, which.plots = NULL, main = NULL, sub = paste("Agglomerative Coefficient = ",round(x$ac, digits = 2)), adj = 0, nmax.lab = 35, max.strlen = 5, xax.pretty = TRUE, ...)
plot(x, ask = FALSE, which.plots = NULL, main = NULL, sub = paste("Divisive Coefficient = ", round(x$dc, digits = 2)), adj = 0, nmax.lab = 35, max.strlen = 5, xax.pretty = TRUE, ...)
plot(x, ask = FALSE, which.plots = NULL, nmax.lab = 40, max.strlen = 5, data = x$data, dist = NULL, cor = TRUE, stand = FALSE, lines = 2, shade = FALSE, color = FALSE, labels = 0, plotchar = TRUE, span = TRUE, xlim = NULL, ylim = NULL, main = NULL, ...)
plot(x, ask, type = "o", ...)
plot(x, border = "red", col = NA, pch = 4, cex = 0.6, add = FALSE, div = 8, ...)
plot(x, ci = 0.95, type = "h", xlab = "Lag", ylab = NULL, ylim = NULL, main = NULL, ci.col = "blue", ci.type = c("white", "ma"), max.mfrow = 6, ask = Npgs > 1 && dev.interactive(), mar = if(nser > 2) c(3,2,2,0.8) else par("mar"), oma = if(nser > 2) c(1,1.2,1,1) else par("oma"), mgp = if(nser > 2) c(1.5,0.6,0) else par("mgp"), xpd = par("xpd"), cex.main = if(nser > 2) 1 else par("cex.main"), verbose = getOption("verbose"), ...)
plot(x, collapseLevel, displayLevel, outer, inner, preserve, FUN, subset, key, grid, ...)
plot(x, conf.int=, mark.time=TRUE, mark=3, col=1, lty=1, lwd=1, cex=1, log=FALSE, xscale=1, yscale=1,  firstx=0, firsty=1, xmax, ymin=0, fun, xlab="", ylab="", xaxs="S", bty=NULL, legend.text=NULL,legend.pos=0,legend.bty="n",main=NULL,...)
plot(x, form, abline, id, idLabels, grid, ...)
plot(x, form, abline, id, idLabels, idResType, grid, ...)
plot(x, form, grid, control, ...)
plot(x, form, omitFixed, level, grid, control, ...)
plot(x, freq = equidist, density = NULL, angle = 45, col = NULL, border = par("fg"), lty = NULL, main = paste("Histogram of", paste(x$xname, collapse="\n")), sub = NULL, xlab = x$xname, ylab, xlim = range(x$breaks), ylim = NULL, axes = TRUE, labels = FALSE, add = FALSE, ...)
plot(x, from = 0, to = 1, xlim = NULL, ...)
plot(x, index=1, t0=NULL, t=NULL, jack=FALSE, qdist="norm",  nclass=NULL, df, ...)
plot(x, key, grid, ...)
plot(x, labels = NULL, hang = 0.1, axes = TRUE, frame.plot = FALSE, ann = TRUE, main = "Cluster Dendrogram", sub = NULL, xlab = NULL, ylab = "Height", ...)
plot(x, labels = colnames(X), set.pars = list(mar = c(0, 6, 0, 6), oma = c(6, 0, 4, 0), tck = -0.01, mfrow = c(nplot, 1)), main = NULL, range.bars = TRUE, ..., col.range = "light gray")
plot(x, levels, conf = c(99, 95, 90, 80, 50)/100, nseg = 50, absVal = TRUE, ...)
plot(x, levels, conf= c(99, 95, 90, 80, 50)/100, nseg = 50, absVal =TRUE, ...)
plot(x, main = NULL, xlab = NULL, ylab = "Density", type = "l", zero.line = TRUE, ...)
plot(x, main = paste("Banner of ", deparse(x$call)), sub = NULL, xlab = "Separation step", col = c(2,0), axes = TRUE, adj = 0, nmax.lab = 35, max.strlen = 5, ...)
plot(x, nmax.lab = 40, max.strlen = 5, main = NULL, sub = NULL, xlab = expression("Silhouette width "* s[i]), col = "gray",  do.col.sort = length(col) > 1, border = 0, cex.names = par("cex.axis"), do.n.k = TRUE, do.clus.stat = TRUE, ...)
plot(x, outer, inner, innerGroups, xlab, ylab, strip, aspect, panel, key, grid, ...)
plot(x, outer, inner, innerGroups, xlab, ylab, strip, panel, key, grid, ...)
plot(x, panel = panel.lda, ..., cex = 0.7, dimen, abbrev = FALSE, xlab = "LD1", ylab = "LD2")
plot(x, panel, xlab = "Range", ylab = "Panel", ...)
plot(x, plot.type = c("single", "row.wise", "col.wise"), main = paste("Isotonic regression", deparse(x$call)), main2 = "Cumulative Data and Convex Minorant", xlab = "x0", ylab = "x$y", par.fit = list(col = "red", cex = 1.5, pch = 13, lwd = 1.5), mar = if (both) 0.1 + c(3.5, 2.5, 1, 1) else par("mar"), mgp = if (both) c(1.6, 0.7, 0) else par("mgp"), grid = length(x$x) < 12, ...)
plot(x, predicted.values = NA, intervals = TRUE, separator = TRUE, col = 1, col.predicted = 2, col.intervals = 4, col.separator = 1, lty = 1, lty.predicted = 1, lty.intervals = 1, lty.separator = 3, ylab = "Observed / Fitted", main = "Holt-Winters filtering", ylim = NULL, ...)
plot(x, resid=TRUE, se=TRUE, df=4, nsmo=40, var, ...)
plot(x, rows = TRUE, col, cex = par("cex"), ...)
plot(x, smooth, showModel, sigma, span, xlab, ylab, type, ylim, grid, ...)
plot(x, subset, key, mark, ...)
plot(x, type = "h", xlab = "k", ylab = "W[k]", main = attr(x,"name"), ...)
plot(x, type = "h", ylim = c(0, max(x)), lwd = 2, xlab = NULL, ylab = NULL, frame.plot = is.num, ...)
plot(x, type = "p", ...)
plot(x, type = c("rectangle", "triangle"), center = FALSE, edge.root = is.leaf(x) || !is.null(attr(x,"edgetext")), nodePar = NULL, edgePar = list(), leaflab = c("perpendicular", "textlike", "none"), dLeaf = NULL, xlab = "", ylab = "", xaxt = "n", yaxt = "s", horiz = FALSE, frame.plot = FALSE, ...)
plot(x, uniform=FALSE, branch=1, compress=FALSE, nspace, margin=0, minbranch=.3, ...)
plot(x, which = c(1:3,5),  caption = c("Residuals vs Fitted", "Normal Q-Q", "Scale-Location", "Cook's distance", "Residuals vs Leverage", "Cook's distance vs Leverage"), panel = if(add.smooth) panel.smooth else points, sub.caption = NULL, main = "", ask = prod(par("mfcol")) < length(which) && dev.interactive(), ..., id.n = 3, labels.id = names(residuals(x)), cex.id = 0.75, qqline = TRUE, cook.levels = c(0.5, 1.0), add.smooth = getOption("add.smooth"), label.pos = c(4,2))
plot(x, xval, xlim, ylim, xlab = "x", ylab = "f(x)", main = NULL, add = FALSE, verticals = TRUE, do.points = TRUE, pch = par("pch"), col.points = par("col"), cex.points = par("cex"), col.hor = par("col"), col.vert = par("col"), lty = par("lty"), lwd = par("lwd"), ...)
plot(x, y = NULL, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE, mar.multi = c(0, 5.1, 0, if(yax.flip) 5.1 else 2.1), oma.multi = c(6, 0, 5, 0), axes = TRUE, ...)
plot(x, y = NULL, type = "p",  xlim = NULL, ylim = NULL, log = "", main = NULL, sub = NULL, xlab = NULL, ylab = NULL, ann = par("ann"), axes = TRUE, frame.plot = axes, panel.first = NULL, panel.last = NULL, col = par("col"), bg = NA, pch = par("pch"), cex = 1, lty = par("lty"), lwd = par("lwd"), asp = NA, ...)
plot(x, y, ...)
plot(x, y, legend.text = NULL, ...)
plot(x, y, xlab = "", ...)
plot.design(x, y = NULL, fun = mean, data = NULL, ..., ylim = NULL, xlab = "Factors", ylab = NULL, main = NULL, ask = NULL, xaxt = par("xaxt"), axes = TRUE, xtick = FALSE)
plot.gam(x,residuals=FALSE,rug=TRUE,se=TRUE,pages=0,select=NULL, scale=-1,n=100,n2=40,pers=FALSE,theta=30,phi=30,jit=FALSE, xlab=NULL,ylab=NULL,main=NULL,ylim=NULL,xlim=NULL,too.far=0.1, all.terms=FALSE,shade=FALSE,shade.col="gray80",...)
plot.mts(x, plot.type = c("multiple", "single"), panel = lines, log = "", col = par("col"),  bg = NA, pch = par("pch"), cex = par("cex"), lty = par("lty"), lwd = par("lwd"), ann = par("ann"),  xlab = "Time", type = "l", main=NULL, oma=c(6, 0, 5, 0), ...)
plot.new()
plot.spec.coherency(x, ci = 0.95, xlab = "frequency", ylab = "squared coherency", ylim = c(0, 1), type = "l", main = NULL, ci.col = "blue", ci.lty = 3, ...)
plot.spec.phase(x, ci = 0.95, xlab = "frequency", ylab = "phase", ylim = c(-pi, pi), type = "l", main = NULL, ci.col = "blue", ci.lty = 3, ...) 
plot.window(xlim, ylim, log = "", asp = NA, ...)
plot.xy(xy, type, pch = 1, lty = "solid", col = par("fg"), bg = NA, cex = 1, lwd = par("lwd"), ...)
plotViewport(margins=c(5.1, 4.1, 4.1, 2.1), ...)
plotcp(x, minline = TRUE, lty = 3, col = 1, upper = c("size", "splits", "none"), ...)
pltree(x, ...)
pltree(x, main = paste("Dendrogram of ", deparse(x$call)), labels = NULL, ylab = "Height", ...)
pmax(..., na.rm=FALSE)
pmin(..., na.rm=FALSE)
pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)
pnchisq(.)
png(filename = "Rplot%03d.png", width = 480, height = 480, pointsize = 12, bg = "white",  res = NA,...)
pnorm(q, mean=0, sd=1, lower.tail = TRUE, log.p = FALSE)
points(formula, data = parent.frame(), ..., subset)
points(x, ...)
points(x, y = NULL, type = "p", pch = par("pch"), col = par("col"), bg = NA, cex = 1, ...)
pointsGrob(x = runif(10), y = runif(10), pch = 1, size = unit(1, "char"), default.units = "native", name = NULL, gp=gpar(), vp = NULL)
poisson(link = "log")
polr(formula, data, weights, start, ..., subset, na.action, contrasts = NULL, Hess = FALSE, model = TRUE, method = c("logistic", "probit", "cloglog", "cauchit"))
poly(x, ..., degree = 1, coefs = NULL)
polySpline(object, ...)
polygon(x, y = NULL, density = NULL, angle = 45, border = NULL, col = NA, lty = NULL, xpd = NULL, ...)
polygonGrob(x=c(0, 0.5, 1, 0.5), y=c(0.5, 1, 0.5, 0), id=NULL, id.lengths=NULL, default.units="npc", name=NULL, gp=gpar(), vp=NULL)
polym(..., degree = 1)
polyroot(z)
pooledSD(object)
pop.viewport(n=1, recording=TRUE)
popViewport(n, recording=TRUE)
possibleExtends(class1, class2, ClassDef1 = getClassDef(class1), ClassDef2 = getClassDef(class2, where =
post(tree, ...)
post(tree, title.,  filename = paste(deparse(substitute(tree)), ".ps", sep = ""),  digits = getOption("digits") - 3, pretty = TRUE, use.n = TRUE, horizontal = TRUE, ...)
postDrawDetails(x)
postscript(file = ifelse(onefile, "Rplots.ps", "Rplot%03d.ps"), onefile = TRUE, paper, family, encoding, bg, fg, width, height, horizontal, pointsize, pagecentre, print.it, command, title = "R Graphics Output", fonts = NULL)
postscriptFont(family, metrics, encoding = "default")
postscriptFonts(...)       
power(lambda = 1)
power.anova.test(groups = NULL, n = NULL, between.var = NULL, within.var = NULL, sig.level = 0.05, power = NULL)
power.prop.test(n = NULL, p1 = NULL, p2 = NULL, sig.level = 0.05, power = NULL, alternative = c("two.sided", "one.sided"), strict = FALSE)
power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05, power = NULL, type = c("two.sample", "one.sample", "paired"), alternative = c("two.sided", "one.sided"), strict = FALSE)
ppgetregion()
ppinit(file)
pplik(pp, R, ng=50, trace=FALSE)
ppoints(n, a = ifelse(n <= 10, 3/8, 1/2))
ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)
ppr(formula, data, weights, subset, na.action, contrasts = NULL, ..., model = FALSE)
ppr(x, ...)
ppr(x, y, weights = rep(1,n), ww = rep(1,q), nterms, max.terms = nterms, optlevel = 2, sm.method = c("supsmu", "spline", "gcvspline"), bass = 0, span = 0, df = 5, gcvpen = 1, ...)
ppregion(xl = 0, xu = 1, yl = 0, yu = 1)
prcomp(formula, data = NULL, subset, na.action, ...)
prcomp(x, ...)
prcomp(x, retx = TRUE, center = TRUE, scale. = FALSE, tol = NULL, ...)
preDrawDetails(x)
pred.rpart(fit, x)
predict(object, n.ahead = 1, newxreg = NULL, se.fit = TRUE, ...)
predict(object, n.ahead = 1, newxreg, se.fit = TRUE, ...)
predict(object, n.ahead=1, prediction.interval = FALSE, level = 0.95, ...)
predict(object, n.out=201, ...)
predict(object, newdata , se.fit = FALSE, scale = NULL, df = Inf,  interval = c("none", "confidence", "prediction"), level = 0.95, ...)
predict(object, newdata = NULL, se = FALSE, ...)
predict(object, newdata = NULL, type = c("link", "response"), level, na.action = na.pass, ...)
predict(object, newdata = NULL, type = c("link", "response", "terms"), se.fit = FALSE, dispersion = NULL, terms = NULL, na.action = na.pass, ...)
predict(object, newdata = list(), type = c("vector", "prob", "class", "matrix"), na.action = na.pass, ...)
predict(object, newdata,  type=c("response", "link", "lp", "linear",  "terms", "quantile",  "uquantile"),  se.fit=FALSE, terms=NULL, p=c(0.1, 0.9),...)
predict(object, newdata, ...)
predict(object, newdata, level, asList, na.action, ...)
predict(object, newdata, level, asList, na.action, naPattern, ...)
predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...)
predict(object, newdata, na.action = na.pass, ...)
predict(object, newdata, na.action, ...)
predict(object, newdata, na.action, naPattern, ...)
predict(object, newdata, prior = object$prior, dimen, method = c("plug-in", "predictive", "debiased"), ...)
predict(object, newdata, prior = object$prior, method = c("plug-in", "predictive", "debiased", "looCV"), ...)
predict(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,  interval = c("none", "confidence", "prediction"), level = 0.95, type = c("response", "terms"), terms = NULL, na.action = na.pass, ...)
predict(object, newdata, subset, pool, asList, se.fit, ...)
predict(object, newdata, type = c("raw","class"), ...)
predict(object, newdata, type = c("row", "factor"), ...)
predict(object, newdata, type=c("lp", "risk", "expected", "terms"), se.fit=FALSE, terms=names(object$assign), collapse, safe=FALSE,...)
predict(object, newx, ...)
predict(object, x, deriv = 0, ...)
predict(object, x, nseg=50, deriv=0, ...)
predict(object, x, y, ...)
predict.ellipsoid(object, n.out=201, ...)
predict.gam(object,newdata,type="link",se.fit=FALSE,terms=NULL, block.size=1000,newdata.guaranteed=FALSE,na.action=na.pass,...)
prepanel.lmline(x, y, ...)
prepanel.loess(x, y, span, degree, family, evaluation, ...)
prepanel.qqmathline(x, y = x, distribution = qnorm, p = c(0.25, 0.75), qtype = 7, groups, subscripts, ...) 
prepanel.tmd.default(x, y, ...)
prepanel.tmd.qqmath(x, f.value = NULL, distribution = qnorm, qtype = 7, groups = NULL, subscripts, ...)
preplot(object, ...)
pretty(x, n = 5, min.n = n %/% 3,  shrink.sml = 0.75, high.u.bias = 1.5, u5.bias = .5 + 1.5*high.u.bias, eps.correct = 0)
prettyNum(x, big.mark = "",   big.interval = 3, small.mark = "", small.interval = 5, decimal.mark = ".", ...)
princomp(formula, data = NULL, subset, na.action, ...)
princomp(x, ...)
princomp(x, cor = FALSE, scores = TRUE, covmat = NULL, subset = rep(TRUE, nrow(as.matrix(x))), ...)
print(x, ...)
print(x, ...) type="simp", npts=20, t=NULL, t0=NULL,  init=rep(0.1, d), mu=rep(0.5, n), LR=FALSE,  strata=NULL, ...)
print(x, ..., digits = NULL, quote = FALSE, right = TRUE)
print(x, calendar, ...)
print(x, diag = NULL, upper = NULL, digits = getOption("digits"), justify = "none", right = TRUE, ...)
print(x, digits = 3, ...)
print(x, digits = 3, cutoff = 0.1, sort = FALSE, ...)
print(x, digits = 3, loadings = x$print.loadings, cutoff = x$cutoff, ...)
print(x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL, right = FALSE, ...)
print(x, digits = getOption("digits") - 2, ...)
print(x, digits = getOption("digits"),  index = 1:ncol(boot.out$t), ...)
print(x, digits = getOption("digits"), ...)
print(x, digits = getOption("digits"), quote = FALSE, na.print = "", zero.print = "0", justify = "none", ...)
print(x, digits = max(1, getOption("digits") - 2), ...)
print(x, digits = max(3, getOption("digits") - 3), symbolic.cor = x$symbolic.cor, signif.stars = getOption("show.signif.stars"), ...)
print(x, digits, ...)
print(x, digits= getOption("digits") - 2, ...)
print(x, hinv = NULL, ...)
print(x, max.level = 1, give.attr = FALSE, ...)
print(x, minlength=0, spaces=2, cp, digits= getOption("digits"), ...)
print(x, pool, ...)
print(x, position, split, more = FALSE, newpage = TRUE, draw.in = NULL, panel.height = lattice.getOption("layout.heights")$panel, panel.width = lattice.getOption("layout.widths")$panel, save.object = lattice.getOption("save.object"), prefix, ...)
print(x, prefix="", ...)
print(x, quote = FALSE, max.levels = NULL, width = getOption("width"), ...)
print(x, scale=1,digits = max(options()$digits - 4, 3), print.n=getOption("survfit.print.n"), show.rmean=getOption("survfit.print.mean"),...)
print(x, showValues = TRUE, ...)
print(x, sigma, rdig, Level, resid, ...)
print(x, sigma, reEstimates, verbose, ...)
print(x, verbose, ...)
print.anova.gam(x, digits = max(3, getOption("digits") - 3),...)
print.anova.glm(.)
print.anova.lm(.)
print.atomic(x, quote = TRUE, ...)
print.coefmat(x, digits=max(3, getOption("digits") - 2), signif.stars = getOption("show.signif.stars"), dig.tst = max(1, min(5, digits - 1)), cs.ind, tst.ind, zap.ind = integer(0), P.values = NULL, has.Pvalue, eps.Pvalue = .Machine$double.eps, na.print = "", ...)
print.ordered(.)
print.plot(.)
print.summary.gam(x,digits = max(3, getOption("digits") - 3),  signif.stars = getOption("show.signif.stars"),...)
print.tabular(.)
printCoefmat(x, digits=max(3, getOption("digits") - 2), signif.stars = getOption("show.signif.stars"), signif.legend = signif.stars, dig.tst = max(1, min(5, digits - 1)), cs.ind = 1:k, tst.ind = k + 1, zap.ind = integer(0), P.values = NULL, has.Pvalue = nc >= 4 &&
printNoClass(x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL, right = FALSE, ...)
printcp(x, digits=getOption("digits") - 2)
prmat(obj, xl, xu, yl, yu, n)
prmatrix(x, rowlab =, collab =, quote = TRUE, right = FALSE, na.print = NULL, ...)
proc.time()
prod(..., na.rm = FALSE)
profile(fitted, ...)
profile(fitted, which = 1:npar, maxpts = 100, alphamax = 0.01, delta.t = cutoff/5, ...)
profiler(fitted, ...)
proj(object, ...)  
proj(object, onedf = FALSE, unweighted.scale = FALSE, ...)  
proj(object, onedf = TRUE, ...)  
promax(x, m = 4)
prompt(object, filename = NULL, name = NULL, ...)
prompt(object, filename = NULL, name = NULL, force.function = FALSE, ...)
promptClass(clName, filename = NULL, type = "class", keywords = "classes", where = topenv(parent.frame()))
promptData(object, filename = NULL, name = NULL)
promptMethods(f, filename = NULL, methods)
promptPackage(package, lib.loc = NULL, filename = NULL, name = NULL, final = FALSE)
prop.table(x, margin=NULL)
prop.test(x, n, p = NULL, alternative = c("two.sided", "less", "greater"), conf.level = 0.95, correct = TRUE)
prop.trend.test(x, n, score = 1:length(x))
prototype(...)
provide(package)
prune(tree, ...)
prune(tree, cp, ...)
ps.options(paper, horizontal, width, height, family, encoding, pointsize, bg, fg, onefile = TRUE, print.it = FALSE, append = FALSE, reset = FALSE, override.check = FALSE)
psi.bisquare(u, c = 4.685, deriv = 0)
psi.hampel(u, a = 2, b = 4, c = 8, deriv = 0)
psi.huber(u, k = 1.345, deriv = 0)
psigamma(x, deriv = 0)
psignrank(q, n, lower.tail = TRUE, log.p = FALSE)
pspline(x, df=4, theta, nterm=2.5 * df, degree=3, eps=0.1, method, ...)
pt(q, df, ncp=0, lower.tail = TRUE, log.p = FALSE)
ptukey(q, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)
punif(q, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
push.viewport(..., recording=TRUE)
pushBack(data, connection, newLine = TRUE)
pushBackLength(connection)
pushViewport(..., recording=TRUE)
pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)
pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE)
pyears(formula, data, weights, subset, na.action, ratetable=survexp.us, scale=365.25, expect=c('event', 'pyears'), model=FALSE, x=FALSE, y=FALSE)
q(save = "default", status = 0, runLast = TRUE)
qbeta(p, shape1, shape2,        lower.tail = TRUE, log.p = FALSE)
qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)
qbirthday(prob = 0.5, classes = 365, coincident = 2)
qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)
qchisq(p, df, ncp=0, lower.tail = TRUE, log.p = FALSE)
qda(formula, data, ..., subset, na.action)
qda(x, ...)
qda(x, grouping, ..., subset, na.action)
qda(x, grouping, prior = proportions, method, CV = FALSE, nu, ...)
qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)
qf(p, df1, df2,        lower.tail = TRUE, log.p = FALSE)
qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE)
qgeom(p, prob, lower.tail = TRUE, log.p = FALSE)
qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE)
qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)
qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)
qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)
qnchisq(.)
qnorm(p, mean=0, sd=1, lower.tail = TRUE, log.p = FALSE)
qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)
qq(x, ...)
qq(x, data = parent.frame(), aspect = "fill",  panel = panel.qq, prepanel, scales, strip,  groups, xlab, xlim, ylab, ylim, f.value = NULL,  drop.unused.levels = lattice.getOption("drop.unused.levels"), ..., default.scales = list(), subscripts, subset)
qqline(y, datax = FALSE, ...)
qqmath(x, ...)
qqmath(x, data = parent.frame(), allow.multiple = is.null(groups) || outer, outer = !is.null(groups), distribution = qnorm, f.value = NULL, auto.key = FALSE, aspect = "fill", panel = "panel.qqmath", prepanel = NULL, scales, strip, groups, xlab, xlim, ylab, ylim, drop.unused.levels = lattice.getOption("drop.unused.levels"), ..., default.scales = list(), subscripts, subset)
qqmath(x, data, ylab, ...)
qqnorm(y, ...)
qqnorm(y, form, abline, id, idLabels, grid, ...)
qqnorm(y, ylim, main = "Normal Q-Q Plot", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles", plot.it = TRUE, datax = FALSE, ...)
qqplot(x, y, plot.it = TRUE, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), ...)
qr(x, tol = 1e-07 , LAPACK = FALSE)
qr.Q(qr, complete = FALSE, Dvec =)
qr.R(qr, complete = FALSE)
qr.X(qr, complete = FALSE, ncol =)
qr.coef(qr, y)
qr.fitted(qr, y, k = qr$rank)
qr.qty(qr, y)
qr.qy(qr, y)
qr.resid(qr, y)
qr.solve(a, b, tol = 1e-7)
qsignrank(p, n, lower.tail = TRUE, log.p = FALSE)
qt(p, df,        lower.tail = TRUE, log.p = FALSE)
qtukey(p, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)
quade.test(formula, data, subset, na.action, ...)
quade.test(y, ...)
quade.test(y, groups, blocks, ...)
quantile(x, ...)
quantile(x, probs = seq(0, 1, 0.25), na.rm = FALSE, names = TRUE, type = 7, ...)
quarters(x, ...)
quarters(x, abbreviate)
quartz(display = "", width = 5, height = 5, pointsize = 12, family = "Helvetica", antialias = TRUE, autorefresh = TRUE)
quartzFont(family)
quartzFonts(...)           
quasi(link = "identity", variance = "constant")
quasibinomial(link = "logit")
quasipoisson(link = "log")
quinModel(Subject, time, conc, dose, interval, lV, lKa, lCl)
quit(save = "default", status = 0, runLast = TRUE)
qunif(p, min=0, max=1, lower.tail = TRUE, log.p = FALSE)
quote(expr)
qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)
qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE)
r2dtable(n, r, c)
rainbow(n, s = 1, v = 1, start = 0, end = max(1,n - 1)/n, gamma = 1)
random.effects(object, ...)
ranef(object, ...)
ranef(object, augFrame, data, which, FUN, standard, omitGroupingFactor, ...)
ranef(object, augFrame, level, data, which, FUN, standard, omitGroupingFactor, subset, ...)
range(..., na.rm = FALSE)
range(..., na.rm = FALSE, finite = FALSE)
rank(x, na.last = TRUE, ties.method = c("average", "first", "random", "max", "min"))
ratetable(...)
rational(x, cycles = 10, max.denominator = 2000, ...)
raw(length = 0)
rawShift(x, n)
rawToBits(x)
rawToChar(x, multiple = FALSE)
rbeta(n, shape1, shape2)
rbind(..., deparse.level = 1)
rbind2(x, y)
rbinom(n, size, prob)
rcauchy(n, location = 0, scale = 1)
rchisq(n, df, ncp=0)
reStruct(object, pdClass, REML, data)
read.00Index(file)
read.S(file)
read.csv(file, header = TRUE, sep = ",", quote="\"", dec=".", fill = TRUE, ...)
read.csv2(file, header = TRUE, sep = ";", quote="\"", dec=",", fill = TRUE, ...)
read.dbf(file, as.is = FALSE)
read.dcf(file, fields=NULL)
read.delim(file, header = TRUE, sep = "\t", quote="\"", dec=".", fill = TRUE, ...)
read.delim2(file, header = TRUE, sep = "\t", quote="\"", dec=",", fill = TRUE, ...)
read.dta(file, convert.dates = TRUE, tz = NULL, convert.factors = TRUE, missing.type = FALSE, convert.underscore=TRUE, warn.missing.labels=TRUE)
read.epiinfo(file, read.deleted = FALSE, guess.broken.dates = FALSE, thisyear = NULL, lower.case.names = FALSE)
read.fortran(file, format, ..., as.is = TRUE, colClasses = NA)
read.ftable(file, sep = "", quote = "\"", row.var.names, col.vars, skip = 0)
read.fwf(file, widths, header = FALSE, sep = "\t", as.is = FALSE, skip = 0, row.names, col.names, n = -1, buffersize = 2000, ...)
read.mtp(file)
read.octave(file)
read.socket(socket, maxlen = 256, loop = FALSE)
read.spss(file, use.value.labels=TRUE, to.data.frame=FALSE, max.value.labels=Inf, trim.factor.names=FALSE)
read.ssd(libname, sectionnames,  tmpXport=tempfile(), tmpProgLoc=tempfile(), sascmd="sas")
read.systat(file, to.data.frame = TRUE)
read.table(file, header = FALSE, sep = "", quote = "\"'", dec = ".", row.names, col.names, as.is = FALSE, na.strings = "NA", colClasses = NA, nrows = -1, skip = 0, check.names = TRUE, fill = !blank.lines.skip, strip.white = FALSE, blank.lines.skip = TRUE, comment.char = "#", allowEscapes = FALSE)
read.table.url(url, method,...)
read.xport(file)
readBin(con, what, n = 1, size = NA, signed = TRUE, endian = .Platform$endian)
readChar(con, nchars)
readCitationFile(file)
readLines(con = stdin(), n = -1, ok = TRUE)
readline(prompt = "")
real(length = 0)
recalc(object, conLin, ...)
reconcilePropertiesAndPrototype(name, properties, prototype, superClasses, where)
recordGraphics(expr, list, env)
recordGrob(expr, list, name=NULL, gp=NULL, vp=NULL)
recordPlot()
recover()
rect(xleft, ybottom, xright, ytop, density = NULL, angle = 45, col = NULL, border = NULL, lty = NULL, lwd = par("lwd"), xpd = NULL, ...)
rect.hclust(tree, k = NULL, which = NULL, x = NULL, h = NULL, border = 2, cluster = NULL)
rectGrob(x = unit(0.5, "npc"), y = unit(0.5, "npc"), width = unit(1, "npc"), height = unit(1, "npc"), just = "centre", hjust = NULL, vjust = NULL,  default.units = "npc", name = NULL, gp=gpar(), vp = NULL)
reduce.nn(train, ind, class)
reformulate(termlabels, response = NULL)
reg.finalizer(e, f)
regexpr(pattern, text, extended = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
registerS3method(genname, class, method, envir = parent.frame())
registerS3methods(info, package, env)
relevel(x, ref, ...)
rematchDefinition(definition, generic, mnames, fnames, signature)
remove(..., list = character(0), pos = -1, envir = as.environment(pos), inherits = FALSE) inherits = FALSE)
remove.packages(pkgs, lib, version)
removeCConverter(id)
removeClass(Class, where)
removeGeneric(f, where)
removeGrob(gTree, gPath, strict = FALSE, grep = FALSE, global = FALSE, warn = TRUE) 
removeMethod(f, signature, where)
removeMethods(f, where = topenv(parent.frame()), all = TRUE)
removeMethodsObject(f, where)
removeTaskCallback(id)
renumerate(x)
reorder(x, ...)
reorder(x, X, FUN = mean, ..., order = is.ordered(x))
reorder(x, wts, agglo.FUN = sum, ...)
rep(x, times, ...)
rep(x, times, length.out, each, ...)
rep.int(x, times)
replace(x, list, values)
replayPlot(x)
replicate(n, expr, simplify = TRUE)
replications(formula, data=NULL, na.action)
representation(...)
require(package, quietly = FALSE, warn.conflicts = TRUE, keep.source = getOption("keep.source.pkgs"), character.only = FALSE, version, save = TRUE)
requireMethods(functions, signature, message, where)
resetClass(Class, classDef, where)
resetGeneric(f, fdef, mlist, where, deflt)
reshape(data, varying = NULL, v.names = NULL, timevar = "time", idvar = "id", ids = 1:NROW(data), times = seq(length = length(varying[[1]])), drop = NULL, direction, new.row.names = NULL, split = list(regexp="\\.", include=FALSE))
reshapeLong(x,jvars,  ilev = row.names(x), jlev = names(x)[jvars], iname = "reshape.i", jname = "reshape.j", vname = "reshape.v")
reshapeWide(x, i, j, val, jnames = levels(j))
resid(object, ...)
residuals(object, ...)
residuals(object, glsFit, ...)
residuals(object, level, conLin, ...)
residuals(object, level, conLin, lmeFit, ...)
residuals(object, level, type, asList, ...)
residuals(object, type = c("deviance", "pearson", "working", "response", "partial"), ...)
residuals(object, type = c("usual", "pearson", "deviance"), ...)
residuals(object, type = c("working", "response", "deviance", "pearson", "partial"), ...)
residuals(object, type, ...)
residuals(object, type, subset, asList, ...)
residuals(object, type=c("martingale", "deviance", "score", "schoenfeld", "dfbeta", "dfbetas", "scaledsch","partial"), collapse=FALSE, weighted=FALSE, ...)
residuals(object, type=c("martingale", "deviance","score","schoenfeld"), collapse=FALSE, weighted=FALSE, ...)
residuals.gam(object, type = c("deviance", "pearson","scaled.pearson", "working", "response"),...)
residuals.survreg(object, type=c("response", "deviance","dfbeta","dfbetas", collapse=FALSE, weighted=FALSE, ...)
restart()
restartDescription(r)
restartFormals(r)
return(value)
rev(x)
rexp(n, rate = 1)
rf(n, df1, df2)
rfs(model, layout=c(2, 1), xlab="f-value", ylab=NULL, distribution = qunif, panel, prepanel, strip, ...)
rgamma(n, shape, rate = 1, scale = 1/rate)
rgb(red, green, blue, alpha, names = NULL, maxColorValue = 1)
rgb2hsv(r, g = NULL, b = NULL, gamma = 1, maxColorValue = 255)
rgeom(n, prob)
rhyper(nn, m, n, k)
ridge(..., theta, df=nvar/2, eps=0.1, scale=TRUE)
rle(x)
rlm(formula, data, weights, ..., subset, na.action, method = c("M", "MM", "model.frame"), wt.method = c("inv.var", "case"), model = TRUE, x.ret = TRUE, y.ret = FALSE, contrasts = NULL)
rlm(x, ...)
rlm(x, y, weights, ..., w = rep(1, nrow(x)), init, psi = psi.huber, scale.est, k2 = 1.345, method = c("M", "MM"), wt.method = c("inv.var", "case"), maxit = 20, acc = 1e-4, test.vec = "resid", lqs.control = NULL)
rlnorm(n, meanlog = 0, sdlog = 1)
rlogis(n, location = 0, scale = 1)
rms.curv(obj)
rmultinom(n, size, prob)
rnbinom(n, size, prob, mu)
rnchisq(.)
rnegbin(n, mu = n, theta = stop("'theta' must be specified")) magic = 0.2, tol = 1e-4) direction = c("both", "backward", "forward"), trace = 1, keep = NULL, steps = 1000, use.start = FALSE, k = 2, ...)
rnorm(n, mean=0, sd=1)
round(x, ...)
round(x, digits = 0)
round(x, units = c("secs", "mins", "hours", "days"))
row(x, as.factor = FALSE)
row.names(x)
rowMeans(x, na.rm = FALSE, dims = 1)
rownames(x, do.NULL = TRUE, prefix = "row")
rowsum(x, group, reorder = TRUE, ...)
rpart(formula, data, weights, subset, na.action = na.rpart, method, model = FALSE, x = FALSE, y = TRUE, parms, control, cost, ...)
rpart.anova(y, offset, parms, wt)
rpart.class(y, offset, parms, wt)
rpart.control(minsplit=20, minbucket=round(minsplit/3), cp=0.01,  maxcompete=4, maxsurrogate=5, usesurrogate=2, xval=10, surrogatestyle=0, maxdepth=30, ...)
rpart.exp(y, offset, parms, wt)
rpart.matrix(frame)
rpart.poisson(y, offset, parms, wt)
rpconvert(x)
rpois(n, lambda)
rsignrank(nn, n)
rsq.rpart(x)
rstandard(model, ...)
rstandard(model, infl = lm.influence(model, do.coef = FALSE), ...)
rstandard(model, infl = lm.influence(model, do.coef = FALSE), sd = sqrt(deviance(model)/df.residual(model)), ...)
rstudent(model, ...)
rstudent(model, infl = influence(model, do.coef = FALSE), ...)
rstudent(model, infl = lm.influence(model, do.coef = FALSE), res = infl$wt.res, ...)
rt(n, df)
rug(x, ticksize=0.03, side=1, lwd=0.5, col, quiet = getOption("warn") < 0, ...)
runif(n, min=0, max=1)
runmed(x, k, endrule = c("median", "keep", "constant"), algorithm = NULL, print.level = 0)
rweibull(n, shape, scale = 1)
rwilcox(nn, m, n)
sQuote(x)
saddle(A=NULL, u=NULL, wdist="m", type="simp", d=NULL, d1=1,  init=rep(0.1, d), mu=rep(0.5, n), LR=FALSE, strata=NULL,  K.adj=NULL, K2=NULL) b3 = NULL, maxi = FALSE, n.iter = n + 2 * m, eps = 1e-10)
sample(x, size, replace = FALSE, prob = NULL)
sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)
save(..., list = character(0), file = stop("'file' must be specified"), ascii = FALSE, version = NULL, envir = parent.frame(),  compress = FALSE)
save.image(file = ".RData", version = NULL, ascii = FALSE, compress = FALSE, safe = TRUE)
save.plot(.)
saveNamespaceImage(package, rdafile, lib.loc = NULL, keep.source = getOption("keep.source.pkgs"), compress = TRUE)
savehistory(file = ".Rhistory")
scale(x, center = TRUE, scale = TRUE)
scan(file = "", what = double(0), nmax = -1, n = -1, sep = "", quote = if(identical(sep, "\n")) "" else "'\"", dec = ".", skip = 0, nlines = 0, na.strings = "NA", flush = FALSE, fill = FALSE, strip.white = FALSE, quiet = FALSE, blank.lines.skip = TRUE, multi.line = TRUE, comment.char = "", allowEscapes = FALSE)
scan.url(url, file = tempfile(), method, ...)
scatter.smooth(x, y = NULL, span = 2/3, degree = 1, family = c("symmetric", "gaussian"), xlab = NULL, ylab = NULL, ylim = range(y, prediction$y, na.rm = TRUE), evaluation = 50, ...)
screen(n = , new = TRUE)
screeplot(x, npcs = min(10, length(x$sdev)), type = c("barplot", "lines"), main = deparse(substitute(x)), ...)
sd(x, na.rm = FALSE)
se.contrast(object, ...)
se.contrast(object, contrast.obj, coef = contr.helmert(ncol(contrast))[, 1], data = NULL, ...)
sealClass(Class, where)
search()
searchpaths()
seek(con, ...)
seek(con, where = NA, origin = "start", rw = "", ...)
seekViewport(name, recording=TRUE)
segments(x0, y0, x1, y1, col = par("fg"), lty = par("lty"), lwd = par("lwd"), ...)
segmentsGrob(x0 = unit(0, "npc"), y0 = unit(0, "npc"), x1 = unit(1, "npc"), y1 = unit(1, "npc"), default.units = "npc", units.per.obs = FALSE, name = NULL, gp = gpar(), vp = NULL)
select.list(list, preselect = NULL, multiple = FALSE, title = NULL)
selectMethod(f, signature, optional = FALSE, useInherited = TRUE, mlist = (if (is.null(fdef)) NULL else
selfStart(model, initial, parameters, template)
semat(obj, xl, xu, yl, yu, n, se)
seq(along.with= )
seq(from)
seq(from, to)
seq(from, to, by, length.out = NULL, along.with = NULL, ...)
seq(from, to, by, length.out = NULL, along.with = NULL, ...) a:b
seq(from, to, by= )
seq(from, to, length.out= )
sequence(nvec)
serialize(object, connection, ascii = FALSE, refhook = NULL)
sessionData()
sessionInfo(package=NULL)
set.seed(seed, kind = NULL)
setAs(from, to, def, replace, where = topenv(parent.frame()))
setCConverterStatus(id, status)
setChildren(x, children)
setClass(Class, representation, prototype, contains=character(), validity, access, where, version, sealed, package)
setClassUnion(name, members, where)
setDataPart(object, value)
setGeneric(name, def= , group=list(), valueClass=character(), where= , package= , signature= , useAsDefault= , genericFunction= )
setGrob(gTree, gPath, newGrob, strict = FALSE, grep = FALSE) 
setGroupGeneric(name, def= , group=list(), valueClass=character(), knownMembers=list(), package= , where= )
setHook(hookName, value, action = c("append", "prepend", "replace"))
setIs(class1, class2, test=NULL, coerce=NULL, replace=NULL, by = character(), where = topenv(parent.frame()), classDef =, extensionObject = NULL, doComplete = TRUE)
setMethod(f, signature=character(), definition, where = topenv(parent.frame()), valueClass = NULL, sealed = FALSE)
setNames(object, nm)
setNamespaceInfo(ns, which, val)
setOldClass(Classes, where, test = FALSE)
setPrimitiveMethods(f, fdef, code, generic, mlist)
setReplaceMethod(f, ..., where = topenv(parent.frame()))
setRepositories(graphics = TRUE)
setValidity(Class, method, where = topenv(parent.frame()) )
setdiff(x, y)
setequal(x, y)
setwd(dir)
shQuote(string, type = c("sh", "csh", "cmd"))
shapiro.test(x)
shingle(x, intervals=sort(unique(x)))
show(object)
show.settings(x = NULL)
showClass(Class, complete=TRUE, propertiesAreCalled="Slots")
showConnections(all = FALSE)
showDefault(object, oldMethods = TRUE)
showExtends(ext, printTo = stdout())
showMethods(f = character(), where = topenv(parent.frame()), classes = NULL, includeDefs = FALSE, inherited = TRUE, showEmpty = TRUE, printTo = stdout()) object@name
showMlist(mlist, includeDefs = TRUE, inherited = TRUE, classes, useArgNames, printTo = stdout() )
sigToEnv(signature, generic)
sign(x)
signalCondition(cond)
signature(...)
signif(x, digits = 6)
silhouette(x, ...)
simpleCondition(message, call = NULL)
simpleKey(text, points = TRUE, rectangles = FALSE, lines = FALSE, col, cex, font, fontface, fontfamily, ...)
simulate(object, nsim, seed, ...)
simulate.lme(object, nsim, seed, m2, method, niterEM, useGen, ...)
sin(x)
single(length = 0)
sinh(x)
sink(file = NULL, append = FALSE, type = c("output", "message"), split = FALSE)
sink.number(type = c("output", "message"))
sizeDiss(d)
slice.index(x, MARGIN) object@name
slot(object, name)
slotNames(x)
smooth(x, kind = c("3RS3R", "3RSS", "3RSR", "3R", "3", "S"), twiceit = FALSE, endrule = "Tukey", do.ends = FALSE)
smooth.construct(object,data,knots)
smooth.f(theta, boot.out, index=1, t=boot.out$t[, index], width=0.5)
smooth.spline(x, y = NULL, w = NULL, df, spar = NULL, cv = FALSE, all.knots = FALSE, nknots = NULL, keep.data = TRUE, df.offset = 0, penalty = 1, control.spar = list())
smoothCon(object,data,knots,absorb.cons=FALSE,scale.penalty=TRUE)
smoothEnds(y, k = 3)
snip.rpart(x, toss)
socketConnection(host = "localhost", port, server = FALSE, blocking = FALSE, open = "a+", encoding = getOption("encoding"))
socketSelect(socklist, write = FALSE, timeout = NULL)
solve(a, b, ...)
solve(a, b, tol, LINPACK = FALSE, ...)
somgrid(xdim = 8, ydim = 6, topo = c("rectangular", "hexagonal"))
sort(x, partial = NULL, na.last = NA, decreasing = FALSE, method = c("shell", "quick"), index.return = FALSE)
sort.list(x, partial = NULL, na.last = TRUE, decreasing = FALSE, method = c("shell", "quick", "radix"))
sortSilhouette(object, ...)
sortedXyData(x, y, data)
source(file, local = FALSE, echo = verbose, print.eval = echo, verbose = getOption("verbose"), prompt.echo = getOption("prompt"), max.deparse.length = 150, chdir = FALSE, encoding = getOption("encoding"))
source.url(url, file = tempfile(), method, ...)
spec.ar(x, n.freq, order = NULL, plot = TRUE, na.action = na.fail, method = "yule-walker", ...)
spec.pgram(x, spans = NULL, kernel, taper = 0.1, pad = 0, fast = TRUE, demean = FALSE, detrend = TRUE, plot = TRUE, na.action = na.fail, ...)
spec.taper(x, p = 0.1)
spectrum(x, ..., method = c("pgram", "ar"))
sphercov(r, d, alpha = 0, se = 1, D = 2)
spineplot(formula, data = list(), breaks = NULL, tol.ylab = 0.05, off = NULL, col = NULL, main = "", xlab = NULL, ylab = NULL, xaxlabels = NULL, yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ..., subset = NULL)
spineplot(x, ...)
spineplot(x, y = NULL, breaks = NULL, tol.ylab = 0.05, off = NULL, col = NULL, main = "", xlab = NULL, ylab = NULL, xaxlabels = NULL, yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ...)
spline(x, y = NULL, n = 3*length(x), method = "fmm", xmin = min(x), xmax = max(x))
spline.des(knots, x, ord = 4, derivs, outer.ok = FALSE)
splineDesign(knots, x, ord = 4, derivs, outer.ok = FALSE)
splineKnots(object)
splineOrder(object)
splinefun(x, y = NULL, method = "fmm")
split(x, f, drop = FALSE, ...)
split.screen(figs, screen, erase = TRUE)
splitFormula(form, sep)
splom(x, ...)
splom(x, data = NULL, ...)
splom(x, data = parent.frame(), auto.key = FALSE, aspect = 1, between = list(x = 0.5, y = 0.5), panel = if (is.null(groups)) "panel.splom" else "panel.superpose", prepanel, scales, strip, groups, xlab = "Scatter Plot Matrix", xlim, ylab = NULL, ylim, superpanel = "panel.pairs", pscales = 5, varnames, drop.unused.levels, ..., default.scales, subset = TRUE)
sprintf(fmt, ...)
sqrt(x)
stack(x, ...)
stack(x, select, ...)
standardGeneric(f)
stars(x, full = TRUE, scale = TRUE, radius = TRUE, labels = dimnames(x)[[1]], locations = NULL, nrow = NULL, ncol = NULL, len = 1, key.loc = NULL, key.labels = dimnames(x)[[2]], key.xpd = TRUE, xlim = NULL, ylim = NULL, flip.labels = NULL, draw.segments = FALSE, col.segments = 1:n.seg, col.stars = NA, axes = FALSE, frame.plot = axes, main = NULL, sub = NULL, xlab = "", ylab = "", cex = 0.8, lwd = 0.25, lty = par("lty"), xpd = FALSE, mar = pmin(par("mar"), 1.1+ c(2*axes+ (xlab != ""), 2*axes+ (ylab != ""), 1,0)), add = FALSE, plot = TRUE, ...)
start(x, ...)
stat.anova(table, test = c("Chisq", "F", "Cp"), scale, df.scale, n)
stderr()
stdin()
stdout()
stem(x, scale = 1, width = 80, atom = 1e-08)
step(object, scope, scale = 0, direction = c("both", "backward", "forward"),  trace = 1, keep = NULL, steps = 1000, k = 2, ...)
stepfun(x, y, f = as.numeric(right), ties = "ordered", right = FALSE)
stl(x, s.window, s.degree = 0, t.window = NULL, t.degree = 1, l.window = nextodd(period), l.degree = t.degree,  s.jump = ceiling(s.window/10), t.jump = ceiling(t.window/10), l.jump = ceiling(l.window/10), robust = FALSE, inner = if(robust)  1 else 2, outer = if(robust) 15 else 0, na.action = na.fail)
stop(..., call. = TRUE, domain = NULL)
stopifnot(...)
storage.mode(x)
str(object, ...)
str(object, max.level = 0, digits.d = 3, give.attr = FALSE, wid = getOption("width"), nest.lev = 0, indent.str = "", stem = "--", ...)
str(object, max.level = NA, vec.len = 4, digits.d = 3, nchar.max = 128, give.attr = TRUE, give.length = TRUE, wid = getOption("width"), nest.lev = 0, indent.str = paste(rep.int(" ", max(0, nest.lev + 1)), collapse = ".."), comp.str="$ ", no.list = FALSE, envir = baseenv(), ...)
strata(..., na.group=FALSE, shortlabel=FALSE)
strftime(x, format="", usetz = FALSE, ...)
strheight(s, units = "user", cex = NULL)
stringHeight(string)
stringWidth(string)
strip.custom(...)
strip.default(which.given, which.panel, var.name, factor.levels, shingle.intervals, strip.names = c(FALSE, TRUE), style = 1, horizontal = TRUE, bg = trellis.par.get("strip.background")$col[which.given], fg = trellis.par.get("strip.shingle")$col[which.given], par.strip.text = trellis.par.get("add.text"))
stripchart(x, method = "overplot", jitter = 0.1, offset = 1/3, vertical = FALSE, group.names, add = FALSE, at = NULL, xlim = NULL, ylim = NULL, main = "", ylab = "", xlab = "", log = "", pch = 0, col = par("fg"), cex = par("cex"))
stripplot(...)
stripplot(x, ...)
stripplot(x, data, panel = "panel.stripplot", jitter.data = FALSE, factor = .5, ...)
strptime(x, format, tz = "")
strsplit(x, split, extended = TRUE, fixed = FALSE, perl = FALSE)
strtrim(x, width)
structure(.Data, ...)
strwidth(s, units = "user", cex = NULL)
strwrap(x, width = 0.9 * getOption("width"), indent = 0, exdent = 0, prefix = "", simplify = TRUE)
sub(pattern, replacement, x, ignore.case = FALSE, extended = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
subset(x, ...)
subset(x, subset, ...)
subset(x, subset, select, drop = FALSE, ...)
substitute(expr, env)
substituteDirect(object, frame, cleanFunction=TRUE)
substr(colnames(x)[nc],1,3) == "Pr(", eps.Pvalue = .Machine$double.eps, na.print = "NA", ...)
substr(x, start, stop)
substring(text, first, last = 1000000)
sum(..., na.rm = FALSE)
summary(object, ...)
summary(object, ..., digits = max(3, getOption("digits")-3))
summary(object, FUN = mean, ...)
summary(object, adjustSigma, verbose, ...)
summary(object, correlation = FALSE, symbolic.cor = FALSE, ...)
summary(object, cp=0, digits=getOption("digits"), file, ...)
summary(object, digits = 15, ...)
summary(object, digits = max(3, getOption("digits") - 2), ...)
summary(object, dispersion = 1, correlation = TRUE, ...)
summary(object, dispersion = NULL, correlation = FALSE, symbolic.cor = FALSE, ...)
summary(object, fitted = FALSE, ...)
summary(object, intercept = FALSE, split, expand.split = TRUE, keep.zero.df = TRUE, ...)
summary(object, loadings = FALSE, cutoff = 0.1, ...)
summary(object, maxsum = 100, ...)
summary(object, maxsum = 7, digits = max(3, getOption("digits")-3), ...)
summary(object, method = c("XtX", "XtWX"), correlation = TRUE, ...)
summary(object, pool, ...)
summary(object, structName, ...)
summary(object, structName, noCorrelation, ...)
summary(object, test = c("Pillai", "Wilks", "Hotelling-Lawley", "Roy"), intercept = FALSE, ...)
summary(object, times, censored=FALSE, scale=1, ...)
summary(object, verbose, ...)
summary.gam(object, dispersion=NULL, freq=TRUE, ...)
summaryRprof(filename = "Rprof.out", chunksize = 5000)
sunflowerplot(x, y = NULL, number, log = "", digits = 6, xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL, add = FALSE, rotate = FALSE, pch = 16, cex = 0.8, cex.fact = 1.5, col = par("col"), bg = NA, size = 1/8, seg.col = 2, seg.lwd = 1.5, ...)
superClassDepth(ClassDef, soFar, simpleOnly = TRUE)
suppressMessages(expr)
suppressWarnings(expr)
supsmu(x, y, wt, span = "cv", periodic = FALSE, bass = 0)
surf.gls(np, covmod, x, y, z, nx = 1000, ...)
surf.ls(np, x, y, z)
survSplit(data, cut, end, event, start, id = NULL, zero = 0, episode=NULL)
survdiff(formula, data, subset, na.action, rho=0)
survdiff.fit(y, x, strat, rho = 0)
survexp(formula, data, weights, subset, na.action, times, cohort=TRUE, conditional=FALSE, ratetable=survexp.us, scale=1, npoints, se.fit=, model=FALSE, x=FALSE, y=FALSE) survexp.uswhite<-survexp.usr[,,"white",]
survexp.fit(x, y, times, death, ratetable)
survfit(formula, data, weights, subset, na.action,  newdata, individual=F, conf.int=.95, se.fit=T,  type=c("kaplan-meier","fleming-harrington", "fh2"), error=c("greenwood","tsiatis"), conf.type=c("log","log-log","plain","none"), conf.lower=c("usual", "peto", "modified"))
survobrien(formula, data)
survpenal.fit(x, y, weights, offset, init, controlvals, dist, scale = 0, nstrat = 1, strata, pcols, pattr, assign, parms = NULL)
survreg(formula=formula(data), data=parent.frame(), weights,  subset,na.action,dist="weibull",  init=NULL, scale=0, control=survreg.control(),parms=NULL,model=FALSE, x=FALSE, y=TRUE, robust=FALSE, ...)
survreg.control(maxiter=30, rel.tolerance=1e-09, failure=1, toler.chol=1e-10, iter.max, debug=0, outer.max=10) iter.max = 20, toler.inf = sqrt(eps), outer.max = 10) 
survreg.fit(x, y, weights, offset, init, controlvals, dist, scale = 0, nstrat = 1, strata, parms = NULL)
svd(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)
sweep(x, MARGIN, STATS, FUN="-", ...)
switch(EXPR, ...)
symbol.C(name)
symbol.For(name)
symbols(x, y = NULL, circles, squares, rectangles, stars, thermometers, boxplots, inches = TRUE, add = FALSE, fg = par("col"), bg = NA, xlab = NULL, ylab = NULL, main = NULL, xlim = NULL, ylim = NULL, ...)
symnum(x, cutpoints=c(0.3, 0.6, 0.8, 0.9, 0.95), symbols=c(" ", ".", ",", "+", "*", "B"), legend = length(symbols) >= 3, na = "?", eps = 1e-5, corr = missing(cutpoints), show.max = if(corr) "1", show.min = NULL, abbr.colnames = has.colnames, lower.triangular = corr && is.numeric(x) && is.matrix(x), diag.lower.tri   = corr && !is.null(show.max))
sys.call(which = 0)
sys.calls()
sys.frame(which = 0)
sys.frames()
sys.function(which = 0)
sys.load.image(name, quiet)
sys.nframe()
sys.on.exit()
sys.parent(n = 1)
sys.parents()
sys.save.image(name)
sys.source(file, envir = baseenv(), chdir = FALSE, keep.source = getOption("keep.source.pkgs"))
sys.status()
system(command, intern = FALSE, ignore.stderr = FALSE)
system.file(..., package = "base", lib.loc = NULL)
system.test(.)
system.time(expr, gcFirst = TRUE)
t(x)
t.test(formula, data, subset, na.action, ...)
t.test(x, ...)
t.test(x, y = NULL, alternative = c("two.sided", "less", "greater"), mu = 0, paired = FALSE, var.equal = FALSE, conf.level = 0.95, ...)
table(..., exclude = c(NA, NaN), dnn = list.names(...), deparse.level = 1)
tabulate(bin, nbins = max(1, bin))
tail(x, ...)
tail(x, n = 6, ...)
tail(x, n = 6, addrownums = TRUE, ...)
tan(x)
tanh(x)
tapply(X, INDEX, FUN = NULL, ..., simplify = TRUE)
taskCallbackManager(handlers = list(), registered = FALSE, verbose = FALSE)
tcl(...)
tclArray()
tclObj(x)
tclRequire(package, warn = TRUE)
tclServiceMode(on = NULL)
tclVar(init="")
tclclose(...)
tclfile.dir(...)
tclfile.tail(...)
tclopen(...)
tclputs(...)
tclread(...)
tclvalue(x)
tcut(x, breaks, labels, scale=1)
tempdir()
tempfile(pattern = "file", tmpdir = tempdir())
tensor.prod.model.matrix(X)
tensor.prod.penalties(S)
termplot(model, data=NULL, envir=environment(formula(model)), partial.resid=FALSE, rug=FALSE, terms=NULL, se=FALSE, xlabs=NULL, ylabs=NULL, main = NULL, col.term = 2, lwd.term = 1.5, col.se = "orange", lty.se = 2, lwd.se = 1, col.res = "gray", cex = 1, pch = par("pch"), col.smth = "darkred", lty.smth=2, span.smth=2/3, ask = interactive() && nb.fig < n.tms && .Device !="postscript", use.factor.levels=TRUE, smooth=NULL, ...)
terms(x, ...)
terms(x, specials = NULL, abb = NULL, data = NULL, neg.out = TRUE, keep.order = FALSE, simplify = FALSE, ..., allowDotAsName=FALSE)
terrain.colors(n)
testPlatformEquivalence(built, run)
testVirtual(properties, extends, prototype, where)
tetragamma(x)
texi2dvi(file, pdf = FALSE, clean = FALSE, quiet = TRUE, texi2dvi = getOption("texi2dvi"))
text(x, ...) pos = NULL, offset = 0.5, vfont = NULL, cex = 1, col = NULL, font = NULL, xpd = NULL, ...)
text(x, splits=TRUE, label="yval", FUN=text, all=FALSE, pretty=NULL, digits=getOption("digits") - 3, use.n=FALSE, fancy=FALSE, fwidth=0.8, fheight=0.8, ...)
textConnection(object, open = "r", local = FALSE)
textGrob(label, x = unit(0.5, "npc"), y = unit(0.5, "npc"),  just = "centre", hjust = NULL, vjust = NULL, rot = 0, check.overlap = FALSE, default.units = "npc", name = NULL, gp = gpar(), vp = NULL)
theta.ml(y, mu, n, weights, limit = 10, eps = .Machine$double.eps^0.25, trace = FALSE)
theta.mm(y, mu, dfr, weights, limit = 10, eps = .Machine$double.eps^0.25)
tilt.boot(data, statistic, R, sim="ordinary", stype="i",  strata=rep(1, n), L=NULL, theta=NULL,  alpha=c(0.025, 0.975), tilt=TRUE, width=0.5,  index=1, ...)
time(x, ...)
time(x, offset=0, ...)
title(main = NULL, sub = NULL, xlab = NULL, ylab = NULL, line = NA, outer = FALSE, ...)
tkStartGUI()
tkXselection.clear(...)
tkXselection.get(...)
tkXselection.handle(...)
tkXselection.own(...)
tk_select.list(list, preselect = NULL, multiple = FALSE, title = NULL)
tkactivate(widget, ...)
tkadd(widget, ...)
tkaddtag(widget, ...)
tkbbox(widget, ...)
tkbell(...)
tkbind(...)
tkbindtags(...)
tkbutton(parent, ...)
tkcanvas(parent, ...)
tkcanvasx(widget, ...)
tkcanvasy(widget, ...)
tkcget(widget, ...)
tkcheckbutton(parent, ...)
tkchooseDirectory(...)
tkclipboard.append(...)
tkclipboard.clear(...)
tkclose(...)
tkcmd(...) # same as tcl(), for compatibility
tkcompare(widget, ...)
tkconfigure(widget, ...)
tkcoords(widget, ...)
tkcreate(widget, ...)
tkcurselection(widget,...)
tkdchars(widget, ...)
tkdebug(widget, ...)
tkdelete(widget, ...)
tkdelta(widget, ...)
tkdeselect(widget, ...)
tkdestroy(win)
tkdialog(...)
tkdlineinfo(widget, ...)
tkdtag(widget, ...)
tkdump(widget, ...)
tkentry(parent, ...)
tkentrycget(widget, ...)
tkentryconfigure(widget, ...)
tkevent.add(...)
tkevent.delete(...)
tkevent.generate(...)
tkevent.info(...)
tkfile.dir(...)
tkfile.tail(...)
tkfind(widget, ...)
tkflash(widget, ...)
tkfocus(...)
tkfont.actual(...)
tkfont.configure(...)
tkfont.create(...)
tkfont.delete(...)
tkfont.families(...)
tkfont.measure(...)
tkfont.metrics(...)
tkfont.names(...)
tkfraction(widget, ...)
tkframe(parent, ...)
tkget(widget, ...)
tkgetOpenFile(...)
tkgetSaveFile(...)
tkgettags(widget, ...)
tkgrab(...)
tkgrab.current(...)
tkgrab.release(...)
tkgrab.set(...)
tkgrab.status(...)
tkgrid(...)
tkgrid.bbox(...)
tkgrid.columnconfigure(...)
tkgrid.configure(...)
tkgrid.forget(...)
tkgrid.info(...)
tkgrid.location(...)
tkgrid.propagate(...)
tkgrid.remove(...)
tkgrid.rowconfigure(...)
tkgrid.size(...)
tkgrid.slaves(...)
tkicursor(widget, ...)
tkidentify(widget, ...)
tkimage.cget(...)
tkimage.configure(...)
tkimage.create(...)
tkimage.names(...)
tkindex(widget, ...)
tkinsert(widget, ...)
tkinvoke(widget, ...)
tkitembind(widget, ...)
tkitemcget(widget, ...)
tkitemconfigure(widget, ...)
tkitemfocus(widget, ...)
tkitemlower(widget, ...)
tkitemraise(widget, ...)
tkitemscale(widget, ...)
tklabel(parent, ...)
tklistbox(parent, ...)
tklower(...)
tkmark.gravity(widget, ...)
tkmark.names(widget, ...)
tkmark.next(widget, ...)
tkmark.previous(widget, ...)
tkmark.set(widget, ...)
tkmark.unset(widget, ...)
tkmenu(parent, ...)
tkmenubutton(parent, ...)
tkmessage(parent, ...)
tkmessageBox(...)
tkmove(widget, ...)
tknearest(widget, ...)
tkopen(...)
tkpack(...)
tkpack.configure(...)
tkpack.forget(...)
tkpack.info(...)
tkpack.propagate(...)
tkpack.slaves(...)
tkpager(file, header, title, delete.file)
tkplace(...)
tkplace.configure(...)
tkplace.forget(...)
tkplace.info(...)
tkplace.slaves(...)
tkpopup(...)
tkpost(widget, ...)
tkpostcascade(widget, ...)
tkpostscript(widget, ...)
tkputs(...)
tkradiobutton(parent, ...)
tkraise(...)
tkread(...)
tkscale(parent, ...)
tkscan.dragto(widget, ...)
tkscan.mark(widget, ...)
tkscrollbar(parent, ...)
tksearch(widget, ...)
tksee(widget, ...)
tkselect(widget, ...)
tkselection.adjust(widget, ...)
tkselection.anchor(widget, ...)
tkselection.clear(widget, ...)
tkselection.from(widget, ...)
tkselection.includes(widget, ...)
tkselection.present(widget, ...)
tkselection.range(widget, ...)
tkselection.set(widget, ...)
tkselection.to(widget,...)
tkset(widget, ...)
tksize(widget, ...)
tktag.add(widget, ...)
tktag.bind(widget, ...)
tktag.cget(widget, ...)
tktag.configure(widget, ...)
tktag.delete(widget, ...)
tktag.lower(widget, ...)
tktag.names(widget, ...)
tktag.nextrange(widget, ...)
tktag.prevrange(widget, ...)
tktag.raise(widget, ...)
tktag.ranges(widget, ...)
tktag.remove(widget, ...)
tktext(parent, ...)
tktitle(x)
tktoggle(widget, ...)
tktoplevel(parent=.TkRoot, ...)
tktype(widget, ...)
tkunpost(widget, ...)
tkwait.variable(...)
tkwait.visibility(...)
tkwait.window(...)
tkwidget(parent, type, ...)
tkwindow.cget(widget, ...)
tkwindow.configure(widget, ...)
tkwindow.create(widget, ...)
tkwindow.names(widget, ...)
tkwinfo(...)
tkwm.aspect(...)
tkwm.client(...)
tkwm.colormapwindows(...)
tkwm.command(...)
tkwm.deiconify(...)
tkwm.focusmodel(...)
tkwm.frame(...)
tkwm.geometry(...)
tkwm.grid(...)
tkwm.group(...)
tkwm.iconbitmap(...)
tkwm.iconify(...)
tkwm.iconmask(...)
tkwm.iconname(...)
tkwm.iconposition(...)
tkwm.iconwindow(...)
tkwm.maxsize(...)
tkwm.minsize(...)
tkwm.overrideredirect(...)
tkwm.positionfrom(...)
tkwm.protocol(...)
tkwm.resizable(...)
tkwm.sizefrom(...)
tkwm.state(...)
tkwm.title(...)
tkwm.transient(...)
tkwm.withdraw(...)
tkxview(widget, ...)
tkxview.moveto(widget, ...)
tkxview.scroll(widget, ...)
tkyposition(widget, ...)
tkyview(widget, ...)
tkyview.moveto(widget, ...)
tkyview.scroll(widget, ...)
tmd(object, ...)
tmd(object, xlab = "mean", ylab = "difference", panel,  prepanel,  ...)
toBibtex(object, ...)
toLatex(object, ...)
toString(x, ...)
toString(x, width = NULL, ...)
toeplitz(x)
tolower(x)
topenv(envir = parent.frame(), matchThisEnv = getOption("topLevelEnvironment"))
topo.colors(n)
toupper(x)
trace(what, tracer, exit, at, print, signature, where = topenv(parent.frame()), edit = FALSE)
traceOff(what)
traceOn(what, tracer=browseAll, exit=NULL)
traceback(x = NULL)
tracingState(on = NULL)
trans3d(x,y,z, pmat)
transform(x, ...)
trellis.currentLayout()
trellis.device(device = getOption("device"), color = !(dev.name == "postscript"), theme = lattice.getOption("default.theme"), new = TRUE, retain = FALSE, ...)
trellis.focus(name, column, row, side, clip.off, highlight = interactive(), ...)
trellis.grobname(name, prefix)
trellis.last.object()
trellis.last.object(warn = TRUE, ...)
trellis.panelArgs()
trellis.panelArgs(x, panel.number)
trellis.par.get(name = NULL)
trellis.par.set(name, value, ..., theme, warn = TRUE)
trellis.switchFocus(name, side, clip.off, highlight, ...)
trellis.unfocus()
trellis.vpname(name = c("position", "split", "split.location", "toplevel", "panel", "strip", "strip.left", "legend", "main", "sub", "xlab", "ylab", "page"), column, row, side = c("left", "top", "right", "bottom", "inside"), clip.off = FALSE, prefix)
trigamma(x)
trls.influence(object)
trmat(obj, xl, xu, yl, yu, n)
truehist(data, nbins = "Scott", h, x0 = -h/1000, breaks, prob = TRUE, xlim = range(breaks), ymax = max(est), col, xlab = deparse(substitute(data)), bty = "n", ...)
trunc(x)
trunc(x, units = c("secs", "mins", "hours", "days"))
truncate(con, ...)
try(expr, silent = FALSE)
tryCatch(expr, ..., finally)
tryNew(Class, where)
trySilent(expr)
ts(data = NA, start = 1, end = numeric(0), frequency = 1, deltat = 1, ts.eps = getOption("ts.eps"), class = , names = )
ts.intersect(..., dframe = FALSE)
ts.plot(..., gpars = list())
ts.union(..., dframe = FALSE)
tsSmooth(object, ...)
tsboot(tseries, statistic, R, l=NULL, sim="model", endcorr=TRUE,  n.sim=NROW(tseries), orig.t=TRUE, ran.gen,  ran.args=NULL, norm=TRUE, ...)
tsdiag(object, gof.lag, ...)
tsp(x)
type.convert(x, na.strings = "NA", as.is = FALSE, dec = ".")
typeof(x)
ucv(x, nb = 1000, lower, upper)
unRematchDefinition(definition)
unclass(x)
undebug(fun)
undoc(package, dir, lib.loc = NULL)
union(x, y)
unique(x, incomparables = FALSE, ...)
unique(x, incomparables = FALSE, MARGIN = 1, ...)
uniquecombs(x)
uniroot(f, interval, lower = min(interval), upper = max(interval), tol = .Machine$double.eps^0.25, maxiter = 1000, ...)
unit(x, units, data=NULL)
unit.c(...)
unit.length(unit)
unit.pmax(...)
unit.pmin(...)
unit.rep(x, times, length.out)
unix.time(expr, gcFirst = TRUE)
unlist(x, recursive = TRUE, use.names = TRUE)
unloadNamespace(ns)
unlockBinding(sym, env)
unname(obj, force = FALSE)
unserialize(connection, refhook = NULL)
unsplit(value, f, drop = FALSE)
unstack(x, ...)
unstack(x, form = formula(x), ...)
unstack(x, form, ...)
untangle.specials(tt, special, order=1)
untrace(what, signature = NULL, where = topenv(parent.frame()))
unz(description, filename, open = "", encoding = getOption("encoding"))
upViewport(n, recording=TRUE)
update(object, ...)
update(object, ..., evaluate = TRUE)
update(object, data, ...)
update(object, fixed., ..., evaluate = TRUE)
update(object, formula, data, order.groups, FUN, outer, inner, labels, units, ...)
update(object, formula., ..., evaluate = TRUE)
update(object, lib.loc = levels(object$inst$LibPath), repositories = levels(object$avail$Repository), ...)
update(object, model., ..., evaluate = TRUE)
update(object, panel, aspect, as.table, between, key, auto.key, legend, layout, main, page, par.strip.text, prepanel, scales, skip, strip, sub, xlab, xlim, ylab, ylim, par.settings, index.cond, perm.cond, ...)
update(old, new, ...)
update.packages(lib.loc = NULL, repos = getOption("repos"), contriburl = contrib.url(repos, type), method, instlib = NULL, ask = TRUE, available = NULL, destdir = NULL, installWithVers = FALSE, checkBuilt = FALSE, type = getOption("pkgType"))
upgrade(object, ask = TRUE, ...)
upper.to.lower.tri.inds(n)
upper.tri(x, diag = FALSE)
url(description, open = "", blocking = TRUE, encoding = getOption("encoding"))
url.show(url, title = url, file = tempfile(), delete.file = TRUE, method, ...)
utf8ToInt(x)
validDetails(x)
validObject(object, test = FALSE)
validSlotNames(names)
var(x, y = NULL, na.rm = FALSE, use)
var.linear(L, strata=NULL)
var.test(formula, data, subset, na.action, ...)
var.test(x, ...)
var.test(x, y, ratio = 1, alternative = c("two.sided", "less", "greater"), conf.level = 0.95, ...)
varComb(...)
varConstPower(const, power, form, fixed)
varExp(value, form, fixed)
varFixed(value)
varFunc(object)
varIdent(value, form, fixed)
varPower(value, form, fixed)
varWeights(object)
variable.names(object, ...)
variable.names(object, full = FALSE, ...)
varimax(x, normalize = TRUE, eps = 1e-5)
variogram(krig, nint, plotit = TRUE, ...)
vcov(object, ...)
vector(mode = "logical", length = 0)
vi(name = NULL, file = "")
viewport(x = unit(0.5, "npc"), y = unit(0.5, "npc"), width = unit(1, "npc"), height = unit(1, "npc"), default.units = "npc", just = "centre",  gp = gpar(), clip = "inherit", xscale = c(0, 1), yscale = c(0, 1), angle = 0, layout = NULL, layout.pos.row = NULL, layout.pos.col = NULL, name = NULL)
vignette(topic, package = NULL, lib.loc = NULL)
vignetteDepends(vignette, recursive = TRUE, reduce = TRUE, local = TRUE, lib.loc = NULL)
vis.gam(x,view=NULL,cond=list(),n.grid=30,too.far=0,col=NA,color="heat", contour.col=NULL,se=-1,type="link",plot.type="persp",zlim=NULL,nCol=50,...)
volume(object)
vpList(...)
vpPath(...)
vpStack(...)
vpTree(parent, children)
warning(..., call. = TRUE, immediate. = FALSE, domain = NULL)
warnings(...)
weekdays(x, abbreviate = FALSE)
weekdays(x, abbreviate)
weighted.mean(x, w, na.rm = FALSE)
weighted.residuals(obj, drop0 = TRUE)
weights(object, ...)
weights(object, type = c("prior", "working"), ...)
which(x, arr.ind = FALSE)
which.is.max(x)
which.max(x)
which.min(x)
while(cond) expr
widthDetails(x)
wilcox.test(formula, data, subset, na.action, ...)
wilcox.test(x, ...)
wilcox.test(x, y = NULL, alternative = c("two.sided", "less", "greater"), mu = 0, paired = FALSE, exact = NULL, correct = TRUE, conf.int = FALSE, conf.level = 0.95, ...)
window(x, ...)
window(x, start = NULL, end = NULL, frequency = NULL, deltat = NULL, extend = FALSE, ...)
wireframe(x, ...)
wireframe(x, data, zoom, scales, at = pretty(z, cuts), drape = FALSE, shade = FALSE, pretty = FALSE, colorkey = any(drape), cuts = 70, col.regions, alpha.regions, ..., col.regions)
with(data, expr, ...)
withCallingHandlers(expr, ...)
withRestarts(expr, ...)
write(x, file = "data", ncolumns = if(is.character(x)) 1 else 5, append = FALSE, sep = " ")
write.csv(...)
write.csv2(...)
write.dbf(dataframe, file, factor2char = TRUE)
write.dcf(x, file = "", append = FALSE, indent = 0.1 * getOption("width"), width = 0.9 * getOption("width"))
write.dta(dataframe, file, version = 6, convert.dates = TRUE, tz = "GMT", convert.factors = c("labels", "string", "numeric", "codes"))
write.foreign(df, datafile, codefile, package = c("SPSS","Stata","SAS"), ...)
write.ftable(x, file = "", quote = TRUE, digits = getOption("digits"))
write.matrix(x, file = "", sep = " ", blocksize)
write.socket(socket, string)
write.table(x, file = "", append = FALSE, quote = TRUE, sep = " ", eol = "\n", na = "NA", dec = ".", row.names = TRUE, col.names = TRUE, qmethod = c("escape", "double"))
writeBin(object, con, size = NA, endian = .Platform$endian)
writeChar(object, con, nchars = nchar(object, type="chars"), eos = "")
writeLines(text, con = stdout(), sep = "\n")
write_PACKAGES(dir, fields = NULL, type = c("source", "mac.binary", "win.binary"), verbose = FALSE)
xaxisGrob(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = NULL, gp = gpar(), vp = NULL)
xedit(name = NULL, file = "")
xemacs(name = NULL, file = "")
xfig(file = ifelse(onefile, "Rplots.fig", "Rplot%03d.fig"), onefile = FALSE, ...)
xgettext(dir, verbose = FALSE, asCall = TRUE)
xgettext2pot(dir, potFile)
xinch(x = 1, warn.log = TRUE)
xngettext(dir, verbose = FALSE)
xor(x, y)
xpdrows.data.frame(x, old.rows, new.rows)
xpred.rpart(fit, xval=10, cp)
xtabs(formula = ~., data = parent.frame(), subset, na.action, exclude = c(NA, NaN), drop.unused.levels = FALSE)
xy.coords(x, y, xlab = NULL, ylab = NULL, log = NULL, recycle = FALSE)
xyVector(x, y)
xyinch(xy = 1, warn.log = TRUE)
xyplot(x, ...)
xyplot(x, data = parent.frame(), panel = if (is.null(groups)) "panel.xyplot" else "panel.superpose", allow.multiple, outer, aspect = "fill",  as.table = FALSE, between, groups, key, auto.key = FALSE, legend, layout, main, page, par.strip.text, prepanel, scales, skip, strip = "strip.default", strip.left = FALSE, sub, xlab, xlim, ylab, ylim, drop.unused.levels, par.settings, perm.cond, index.cond, ..., default.scales, panel.groups = "panel.xyplot", subscripts, subset)
xyz.coords(x, y, z, xlab = NULL, ylab = NULL, zlab = NULL, log = NULL, recycle = FALSE)
yaxisGrob(at = NULL, label = TRUE, main = TRUE, edits = NULL, name = NULL, gp = gpar(), vp = NULL)
yinch(y = 1, warn.log = TRUE)
zapsmall(x, digits = getOption("digits"))
zip.file.extract(file, zipname = "R.zip")
